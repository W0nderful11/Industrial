import urllib.parse

from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.i18n import I18n
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.database import ORM
from services.telegram.misc.callbacks import (
    AdminCallback, RenewSubscription, ChooseModelCallback,
    FullButtonCallback, LangCallback, LangChangeCallBack, 
    BroadcastLangCallback, BroadcastCallback, ShowDiagnosticsCallback, UserListPagination,
    MassTokenLangCallback, ResistorCalculatorCallback, ResistorCalculatorTypeCallback,
    AnalysisHistoryCallback, AnalysisDetailCallback, AnalysisHistoryPagination, AnalysisFilterCallback
)

CONSULTATION_USERNAME = "masterkazakhstan"

class Keyboards:
    @staticmethod
    def balance_keyboard(i18n: I18n, user) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=i18n.gettext("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", locale=user.lang) + " üí≥",
                callback_data="topup_balance_user"
            )]
        ])

    @staticmethod
    def send_phone(i18n: I18n, user):
        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True,
            keyboard=[[
                KeyboardButton(
                    text=i18n.gettext('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', locale=user.lang),
                    request_contact=True
                )
            ]]
        )

    @staticmethod
    def home(i18n: I18n, user) -> ReplyKeyboardMarkup:
        user_keyboard = [
            [
                KeyboardButton(text=i18n.gettext("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", locale=user.lang) + " üìï"),
                KeyboardButton(text=i18n.gettext("–ú–æ–π –±–∞–ª–∞–Ω—Å", locale=user.lang) + " üí∞")
            ],
            [
                KeyboardButton(text=i18n.gettext("Referral link üîó", locale=user.lang)),
                KeyboardButton(text=i18n.gettext("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", locale=user.lang) + " üí≥")
            ],
            [
                KeyboardButton(text=i18n.gettext("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", locale=user.lang) + " üè≥Ô∏è"),
                KeyboardButton(text=i18n.gettext("–ù–∞—à –∫–∞–Ω–∞–ª", locale=user.lang) + " üë•", url="https://t.me/Yourrepairassistant")
            ],
            [
                KeyboardButton(text=i18n.gettext("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–∏—Å–∫–æ–≤", locale=user.lang) + " üìö"),
                KeyboardButton(text=i18n.gettext("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤", locale=user.lang) + " üßÆ")
            ],
            [
                KeyboardButton(text=i18n.gettext("–ú–æ–∏ –∞–Ω–∞–ª–∏–∑—ã", locale=user.lang) + " üìä")
            ]
        ]

        if user.role == 'admin':
            user_keyboard.append([KeyboardButton(text=i18n.gettext("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", locale=user.lang) + " ‚öôÔ∏è")])

        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=user_keyboard
        )

    @staticmethod
    def admin_panel(i18n: I18n, user) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–†–∞—Å—Å—ã–ª–∫–∞", locale='ru') + " üì£",
                    callback_data="broadcast"
                )
            ],
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", locale='ru') + " üë•",
                    callback_data="users_list"
                )
            ],
            [
                InlineKeyboardButton(
                    text=i18n.gettext("Find user üîé", locale='ru'),
                    switch_inline_query_current_chat=""
                )
            ],
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–°–ø–∏—Å–∞—Ç—å —Ç–æ–∫–µ–Ω—ã", locale='ru') + " ‚ûñ",
                    callback_data="admin_deduct_tokens"
                )
            ]
        ])
    
    def admin_balance_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")],
            [InlineKeyboardButton(text="üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_check_balance")],
            [InlineKeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="admin_history")],
            [InlineKeyboardButton(text="üßº –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_reset_balance")],
        ])
    
    @staticmethod
    def get_users_list_keyboard(total_pages: int, current_page: int, i18n: I18n, user) -> InlineKeyboardMarkup:
        buttons = []
        nav_buttons = []

        if current_page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=UserListPagination(page=current_page - 1).pack()
                )
            )

        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{current_page + 1}/{total_pages}",
                callback_data="nothing"
            )
        )

        if current_page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=UserListPagination(page=current_page + 1).pack()
                )
            )

        buttons.append(nav_buttons)
        buttons.append([
            InlineKeyboardButton(
                text=i18n.gettext("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID", locale=user.lang),
                callback_data="delete_user_by_id"
            ),
            InlineKeyboardButton(
                text=i18n.gettext("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", locale=user.lang) + " ‚Ü©Ô∏è",
                callback_data="back_to_admin"
            )
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        buttons.append([InlineKeyboardButton(text="–ù–∞—á–∏—Å–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤—Å–µ–º ü™ô", callback_data="mass_token_topup")])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def back_to_home(i18n: I18n, user) -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True,
            keyboard=[[
                KeyboardButton(text=i18n.gettext("–ù–∞–∑–∞–¥ ‚óÄÔ∏è", locale=user.lang))
            ]]
        )

    @staticmethod
    def balance_request_button(user_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                callback_data=f"request_topup:{user_id}"
            )]
        ])

    @staticmethod
    def lang(is_menu=False):
        builder = InlineKeyboardBuilder()
        builder.button(
            text="English üá∫üá∏",
            callback_data=LangCallback(lang="en") if not is_menu else LangChangeCallBack(action='changed', lang="en")
        )
        builder.button(
            text="–†—É—Å—Å–∫–∏–π üá∑üá∫",
            callback_data=LangCallback(lang="ru") if not is_menu else LangChangeCallBack(action='changed', lang="ru")
        )
        return builder.as_markup()

    @staticmethod
    def links(links: list, i18n: I18n, user):
        builder = InlineKeyboardBuilder()
        for i, link in enumerate(links, start=1):
            builder.button(
                text=i18n.gettext("–ú–∞—Ç–µ—Ä–∏–∞–ª {number} üìé", locale=user.lang).format(number=i), 
                url=link
            )
        builder.adjust(1, repeat=True)
        return builder.as_markup()

    @staticmethod
    def empty() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[])

    @staticmethod
    def guest(user_id: int, i18n: I18n, user) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=i18n.gettext("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", locale=user.lang),
            callback_data=AdminCallback(action="accept", user_id=user_id).pack()
        )
        builder.button(
            text=i18n.gettext("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", locale=user.lang),
            callback_data=AdminCallback(action="cancel", user_id=user_id).pack()
        )
        return builder.as_markup()

    @staticmethod
    def broadcast_confirmation(user_id: int, i18n: I18n, lang_code: str) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(
            text=i18n.gettext("Accept ‚úÖ", locale=lang_code),
            callback_data=BroadcastCallback(action="accept", user_id=user_id).pack()
        )
        builder.button(
            text=i18n.gettext("Reject ‚ùå", locale=lang_code),
            callback_data=BroadcastCallback(action="cancel", user_id=user_id).pack()
        )
        return builder.as_markup()

    @staticmethod
    def broadcast_lang_options(i18n: I18n) -> InlineKeyboardMarkup:
        """
        Generates keyboard for broadcast language selection.
        Uses 'ru' locale for button text as per admin panel conventions.
        """
        builder = InlineKeyboardBuilder()
        builder.button(
            text="English üá∫üá∏", # Text can be hardcoded or use i18n.gettext with 'ru'
            callback_data=BroadcastLangCallback(lang="en").pack()
        )
        builder.button(
            text="–†—É—Å—Å–∫–∏–π üá∑üá∫", # Text can be hardcoded or use i18n.gettext with 'ru'
            callback_data=BroadcastLangCallback(lang="ru").pack()
        )
        return builder.as_markup()

    @staticmethod
    def months(user, i18n: I18n) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        periods = [
            (1, i18n.gettext("1 –º–µ—Å—è—Ü", locale=user.lang)),
            (3, i18n.gettext("3 –º–µ—Å—è—Ü–∞", locale=user.lang)),
            (6, i18n.gettext("6 –º–µ—Å—è—Ü–µ–≤", locale=user.lang)),
            (12, i18n.gettext("1 –≥–æ–¥", locale=user.lang))
        ]
        
        for months, text in periods:
            builder.button(
                text=text,
                callback_data=RenewSubscription(user_id=user.user_id, months=months).pack())
        
        builder.adjust(2, repeat=True)
        return builder.as_markup()

    @staticmethod
    def models(models: list) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        for model in models:
            builder.button(
                text=model,
                callback_data=ChooseModelCallback(model=model).pack()
            )
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def add_full_btn(builder: InlineKeyboardBuilder, error_code: str, model: str) -> InlineKeyboardBuilder:
        safe_error_code = error_code.replace(':', 'doubledott')
        builder.button(
            text="+FULL",
            callback_data=FullButtonCallback(action='full', error_code=safe_error_code, model=model).pack()
        )
        return builder

    @staticmethod
    def show_diagnostics_button(i18n: I18n, lang_code: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        button_text = i18n.gettext("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", locale=lang_code)
        builder = InlineKeyboardBuilder()
        builder.button(
            text=button_text,
            callback_data=ShowDiagnosticsCallback().pack()
        )
        return builder.as_markup()

    @staticmethod
    def get_topup_keyboard(user_id: int):
        builder = InlineKeyboardBuilder()
        builder.button(text="100‚Ç∏", callback_data=f"topup:{user_id}:100")
        builder.button(text="500‚Ç∏", callback_data=f"topup:{user_id}:500") 
        builder.button(text="1000‚Ç∏", callback_data=f"topup:{user_id}:1000")
        builder.button(text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data=f"topup_custom:{user_id}")
        builder.adjust(3, 1)
        return builder.as_markup()

    @staticmethod
    def confirm_mass_token_topup(i18n: I18n, lang: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤."""
        buttons = [
            [
                InlineKeyboardButton(
                    text=i18n.gettext("‚úÖ –î–∞, –Ω–∞—á–∏—Å–ª–∏—Ç—å –≤—Å–µ–º", locale=lang),
                    callback_data="confirm_mass_token_topup"
                )
            ],
            [
                InlineKeyboardButton(
                    text=i18n.gettext("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", locale=lang),
                    callback_data="cancel_mass_token_topup"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_consultation_button(i18n: I18n, user_lang: str, bot_response_text: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
        """
        base_text = i18n.gettext(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞, –Ω–æ —Ö–æ—á—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ª–∏—á–Ω–æ.\n\n"
            "–í–æ—Ç –º–æ–π —Ñ–∞–π–ª: [–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç]\n\n"
            "–ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!",
            locale=user_lang
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º format-—Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
        full_text = f"{base_text}\n\n{bot_response_text}" 

        # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –≤ URL, –æ–±—Ä–µ–∂–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ URL –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "reply markup is too long"
        # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –º–µ–Ω—å—à–∏–π –ª–∏–º–∏—Ç
        max_text_len = 1200
        if len(full_text) > max_text_len:
            full_text = full_text[:max_text_len] + "..."
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º urllib.parse.quote –≤–º–µ—Å—Ç–æ quote_plus, —á—Ç–æ–±—ã –ø—Ä–æ–±–µ–ª—ã –Ω–µ –∑–∞–º–µ–Ω—è–ª–∏—Å—å –Ω–∞ +
        url_encoded_text = urllib.parse.quote(full_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É
        if len(url_encoded_text) > 2000:
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –æ–±—Ä–µ–∑–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—â–µ —Å–∏–ª—å–Ω–µ–µ
            max_text_len = int(max_text_len * 0.8)  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 20%
            full_text = full_text[:max_text_len] + "..."
            url_encoded_text = urllib.parse.quote(full_text)
        
        consultation_url = f"https://t.me/{CONSULTATION_USERNAME}?text={url_encoded_text}"

        builder = InlineKeyboardBuilder()
        builder.button(
            text=i18n.gettext("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üßë‚Äçüîß", locale=user_lang),
            url=consultation_url
        )
        return builder.as_markup()

    @staticmethod
    def mass_token_lang_options(i18n: I18n) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤."""
        builder = InlineKeyboardBuilder()
        builder.button(
            text="English üá∫üá∏", 
            callback_data=MassTokenLangCallback(action='select', lang="en").pack() # –ò—Å–ø–æ–ª—å–∑—É–µ–º action='select'
        )
        builder.button(
            text="–†—É—Å—Å–∫–∏–π üá∑üá∫", 
            callback_data=MassTokenLangCallback(action='select', lang="ru").pack() # –ò—Å–ø–æ–ª—å–∑—É–µ–º action='select'
        )
        return builder.as_markup()

    @staticmethod
    def resistor_calculator_menu(i18n: I18n, user) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ —Ü–≤–µ—Ç–∞–º", locale=user.lang) + " üé®",
                    callback_data=ResistorCalculatorTypeCallback(calculator_type="color").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É", locale=user.lang) + " üî¢",
                    callback_data=ResistorCalculatorTypeCallback(calculator_type="reverse_color").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ –∫–æ–¥—É", locale=user.lang) + " üì±",
                    callback_data=ResistorCalculatorTypeCallback(calculator_type="smd_code").pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text=i18n.gettext("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É", locale=user.lang) + " ‚öôÔ∏è",
                    callback_data=ResistorCalculatorTypeCallback(calculator_type="smd_value").pack()
                )
            ]
        ])

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
    @staticmethod
    def analysis_history_main(i18n: I18n, user, total_analyses: int = 0) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤."""
        builder = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–≤–∞ —Ä—è–¥–∞
        builder.button(
            text=i18n.gettext("üìä –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="list", page=0).pack()
        )
        
        builder.button(
            text=i18n.gettext("üîç –§–∏–ª—å—Ç—Ä", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="filter").pack()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑—ã
        if total_analyses > 0:
            builder.button(
                text=i18n.gettext("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é", locale=user.lang),
                callback_data=AnalysisHistoryCallback(action="clear_all").pack()
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        builder.button(
            text=i18n.gettext("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", locale=user.lang),
            callback_data="home_menu"
        )
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏: 2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–π
        if total_analyses > 0:
            builder.adjust(2, 1, 1)  # 2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –ø–æ 1 –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        else:
            builder.adjust(2, 1)  # 2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
        
        return builder.as_markup()

    @staticmethod
    def analysis_history_list(
        i18n: I18n, 
        user, 
        analyses: list, 
        page: int, 
        total_pages: int,
        current_filter: dict | None = None
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        for i, analysis in enumerate(analyses, 1):
            number = page * 5 + i  # 5 –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            device_emoji = "üì±" if "iPhone" in (analysis.device_model or "") or "iPad" in (analysis.device_model or "") else "üì±"
            status_emoji = "‚úÖ" if analysis.is_solution_found else "‚ùå"
            
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            device_name = analysis.device_model or i18n.gettext("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", locale=user.lang)
            if len(device_name) > 20:
                device_name = device_name[:17] + "..."
            
            button_text = f"{number}. {device_emoji} {device_name} {status_emoji}"
            builder.button(
                text=button_text,
                callback_data=AnalysisDetailCallback(analysis_id=analysis.id, action="view").pack()
            )
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        builder.adjust(1)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–æ–π –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        prev_page = page - 1 if page > 0 else total_pages - 1
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=AnalysisHistoryPagination(
                    page=prev_page,
                    filter_type=current_filter.get("type") if current_filter else None,
                    filter_value=current_filter.get("value") if current_filter else None
                ).pack()
            )
        )
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{page + 1}/{total_pages}" if total_pages > 0 else "1/1",
                callback_data="nothing"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" - —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è  
        next_page = page + 1 if page < total_pages - 1 else 0
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=AnalysisHistoryPagination(
                    page=next_page,
                    filter_type=current_filter.get("type") if current_filter else None,
                    filter_value=current_filter.get("value") if current_filter else None
                ).pack()
            )
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        if nav_buttons:
            builder.row(*nav_buttons)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder.button(
            text=i18n.gettext("üîç –§–∏–ª—å—Ç—Ä", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="filter").pack()
        )
        
        builder.button(
            text=i18n.gettext("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="clear_all").pack()
        )
        
        builder.button(
            text=i18n.gettext("üè† –ì–ª–∞–≤–Ω–∞—è", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="main").pack()
        )
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑—ã –ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
        adjust_args = [1] * len(analyses) + [3, 3]  # –∞–Ω–∞–ª–∏–∑—ã –ø–æ 1, –Ω–∞–≤–∏–≥–∞—Ü–∏—è 3 –≤ —Ä—è–¥, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3 –≤ —Ä—è–¥
        builder.adjust(*adjust_args)
        
        return builder.as_markup()

    @staticmethod
    def analysis_detail(i18n: I18n, user, analysis, can_repeat: bool = True, attempts_info: str | None = None) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        builder = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–≤–∞ —Ä—è–¥–∞
        if can_repeat:
            repeat_text = i18n.gettext("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑", locale=user.lang)
            if attempts_info:
                repeat_text += f" ({attempts_info})"
            
            builder.button(
                text=repeat_text,
                callback_data=AnalysisDetailCallback(analysis_id=analysis.id, action="repeat").pack()
            )
        else:
            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            builder.button(
                text=i18n.gettext("üîí –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", locale=user.lang),
                callback_data="blocked_repeat"
            )
        
        builder.button(
            text=i18n.gettext("üíæ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", locale=user.lang),
            callback_data=AnalysisDetailCallback(analysis_id=analysis.id, action="download").pack()
        )
        
        builder.button(
            text=i18n.gettext("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", locale=user.lang),
            callback_data=AnalysisDetailCallback(analysis_id=analysis.id, action="share").pack()
        )
        
        builder.button(
            text=i18n.gettext("üóë –£–¥–∞–ª–∏—Ç—å", locale=user.lang),
            callback_data=AnalysisDetailCallback(analysis_id=analysis.id, action="delete").pack()
        )
        
        # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        builder.button(
            text=i18n.gettext("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="list", page=0).pack()
        )
        
        builder.button(
            text=i18n.gettext("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", locale=user.lang),
            callback_data="home_menu"
        )
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏: 2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 2 –≤–æ –≤—Ç–æ—Ä–æ–º, 2 –≤ —Ç—Ä–µ—Ç—å–µ–º
        builder.adjust(2, 2, 2)
        return builder.as_markup()

    @staticmethod
    def analysis_filter_menu(i18n: I18n, user) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤."""
        builder = InlineKeyboardBuilder()
        
        builder.button(
            text=i18n.gettext("üìÑ –ü–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞", locale=user.lang),
            callback_data=AnalysisFilterCallback(filter_type="file_type").pack()
        )
        
        builder.button(
            text=i18n.gettext("‚úÖ –£—Å–ø–µ—à–Ω—ã–µ", locale=user.lang),
            callback_data=AnalysisFilterCallback(filter_type="success", filter_value="true").pack()
        )
        
        builder.button(
            text=i18n.gettext("‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–µ", locale=user.lang),
            callback_data=AnalysisFilterCallback(filter_type="success", filter_value="false").pack()
        )
        
        builder.button(
            text=i18n.gettext("üìÖ –ü–æ –¥–∞—Ç–µ", locale=user.lang),
            callback_data=AnalysisFilterCallback(filter_type="date").pack()
        )
        
        builder.button(
            text=i18n.gettext("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", locale=user.lang),
            callback_data=AnalysisFilterCallback(filter_type="reset").pack()
        )
        
        builder.button(
            text=i18n.gettext("üîô –ù–∞–∑–∞–¥", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="main").pack()
        )
        
        builder.button(
            text=i18n.gettext("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", locale=user.lang),
            callback_data="home_menu"
        )
        
        builder.adjust(2, 2, 1, 2)
        return builder.as_markup()

    @staticmethod
    def analysis_file_type_filter(i18n: I18n, user) -> InlineKeyboardMarkup:
        """–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤."""
        builder = InlineKeyboardBuilder()
        
        file_types = [
            ("ips", "üìÑ .ips —Ñ–∞–π–ª—ã"),
            ("txt", "üìù .txt —Ñ–∞–π–ª—ã"),
            ("photo", "üñºÔ∏è –§–æ—Ç–æ"),
            ("json", "üîß .json —Ñ–∞–π–ª—ã")
        ]
        
        for file_type, display_name in file_types:
            builder.button(
                text=i18n.gettext(display_name, locale=user.lang),
                callback_data=AnalysisFilterCallback(filter_type="file_type", filter_value=file_type).pack()
            )
        
        builder.button(
            text=i18n.gettext("üîô –ù–∞–∑–∞–¥", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="filter").pack()
        )
        
        builder.button(
            text=i18n.gettext("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", locale=user.lang),
            callback_data="home_menu"
        )
        
        builder.adjust(2, 2, 2)
        return builder.as_markup()

    @staticmethod
    def analysis_delete_confirm(i18n: I18n, user, analysis_id: int) -> InlineKeyboardMarkup:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞."""
        builder = InlineKeyboardBuilder()
        
        builder.button(
            text=i18n.gettext("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", locale=user.lang),
            callback_data=AnalysisDetailCallback(analysis_id=analysis_id, action="confirm_delete").pack()
        )
        
        builder.button(
            text=i18n.gettext("‚ùå –û—Ç–º–µ–Ω–∞", locale=user.lang),
            callback_data=AnalysisDetailCallback(analysis_id=analysis_id, action="view").pack()
        )
        
        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    def analysis_clear_all_confirm(i18n: I18n, user) -> InlineKeyboardMarkup:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤."""
        builder = InlineKeyboardBuilder()
        
        builder.button(
            text=i18n.gettext("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="confirm_clear_all").pack()
        )
        
        builder.button(
            text=i18n.gettext("‚ùå –û—Ç–º–µ–Ω–∞", locale=user.lang),
            callback_data=AnalysisHistoryCallback(action="main").pack()
        )
        
        builder.adjust(2)
        return builder.as_markup()

