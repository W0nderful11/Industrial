"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
"""
import re
import logging
from typing import Optional

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InaccessibleMessage
from aiogram.utils.i18n import I18n

from database.models import User
from services.telegram.misc.callbacks import ShowDiagnosticsCallback, FullButtonCallback
from services.telegram.misc.keyboards import Keyboards
from services.telegram.template.analyzer import template_about_analysis_result, template_about_analysis_result_header, SolutionAboutError
from services.telegram.schemas.analyzer import ModelPhone
from .utils import desanitize_callback_data

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(ShowDiagnosticsCallback.filter())
async def show_detailed_diagnostics(callback: CallbackQuery, i18n: I18n, user: User):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ —à–∞–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —É–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É."""
    lang = user.lang

    diagnostic_parts = [
        i18n.gettext("""
–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å (–ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É):
 1. –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å Wi-Fi –∏ –º–æ–¥–µ–º–∞ ‚Äî —á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω—ã —Å –º–µ–∂–ø–ª–∞—Ç–Ω—ã–º–∏ –æ–±—Ä—ã–≤–∞–º–∏ –∏–ª–∏ RF-–º–æ–¥—É–ª–µ–º.
 2. –§—É–Ω–∫—Ü–∏–∏ –≤–∏–±—Ä–∞—Ü–∏–∏ (Taptic Engine) ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –≤–∏–±—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∑–≤—É–∫–æ–≤.
 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞—Å–∞ –∏ –≥–∏—Ä–æ—Å–∫–æ–ø–∞ ‚Äî –∑–∞–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä—ã. –ü—Ä–∏ —Å–±–æ—è—Ö ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–¥–Ω–∏–º —à–ª–µ–π—Ñ–æ–º –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏.
 4. –ó–≤—É–∫ –∏ –∑–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ ‚Äî —Ç–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∫—Ç–æ—Ñ–æ–Ω, –∞—É–¥–∏–æ –≤ –≤–∏–¥–µ–æ, –∑–≤–æ–Ω–∫–∞—Ö.
 5. –ê–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç —ç–∫—Ä–∞–Ω–∞ ‚Äî –∫–æ—Å–≤–µ–Ω–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –≥–∏—Ä–æ—Å–∫–æ–ø–∞ –∏ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞.
 6. –†–∞–±–æ—Ç–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏, –±–∞—Ä–æ–º–µ—Ç—Ä–∞ –∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞—Ä–æ–≤ –∏–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤–ª–∞–≥–∏.
 7. –§—É–Ω–∫—Ü–∏—è –∑–∞—Ä—è–¥–∫–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ü–ö ‚Äî –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–±–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ Lightning –∏ Type-C
        """, locale=lang),
        i18n.gettext("""
–ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ:
 1. –°–ª–µ–¥—ã –æ–∫–∏—Å–ª–æ–≤ –Ω–∞ —à–ª–µ–π—Ñ–∞—Ö –∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞—Ö (–æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∏–∂–Ω–∏–π —à–ª–µ–π—Ñ, —à–ª–µ–π—Ñ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏, —Ä–∞–∑—ä—ë–º Taptic Engine).
 2. –ù–∞–ª–∏—á–∏–µ –º–µ–ª–∫–∏—Ö —Å–∫–æ–ª–æ–≤, —Ç—Ä–µ—â–∏–Ω –∏–ª–∏ –≤—ã–≥–∏–±–æ–≤ –ø–ª–∞—Ç—ã ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ–∂—Å–ª–æ–π–Ω—ã–µ –æ–±—Ä—ã–≤—ã.
        """, locale=lang),
        i18n.gettext("""
–ß—Ç–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
 1. –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –¥–∏—Å–ø–ª–µ–π —Å –ø–µ—Ä–µ–¥–Ω–∏–º —à–ª–µ–π—Ñ–æ–º ‚Äî –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –¥–∞—Ç—á–∏–∫–∞–º–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è, –∫–æ–º–ø–∞—Å–æ–º –∏ –≥–∏—Ä–æ—Å–∫–æ–ø–æ–º.
 2. –ó–∞–≤–µ–¥–æ–º–æ –∏—Å–ø—Ä–∞–≤–Ω—ã–π –Ω–∏–∂–Ω–∏–π —à–ª–µ–π—Ñ —Å –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–æ–º –∏ Lightning (Type-C) -–∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–º.
 3. –ó–∞–≤–µ–¥–æ–º–æ —Ä–∞–±–æ—á–∏–π –∫–æ—Ä–ø—É—Å –≤ —Å–±–æ—Ä–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –¥–∏–Ω–∞–º–∏–∫–∞–º–∏ –∏ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–µ–π ‚Äî —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
 4. –î—Ä—É–≥–æ–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä ‚Äî –ø—Ä–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞—Ö.
 5. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–ª–µ–π—Ñ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏ ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —Å–±–æ–π –≤ –¥—Ä—É–≥–æ–π —á–∞—Å—Ç–∏, —ç—Ç–æ—Ç –º–æ–¥—É–ª—å —á–∞—Å—Ç–æ –º–µ—à–∞–µ—Ç –¥—Ä—É–≥–∏–º.
        """, locale=lang),
        i18n.gettext("""
–í–∞–∂–Ω–æ:
–ü—Ä–∏ —Å–∫—Ä—ã—Ç—ã—Ö –º–µ–∂–ø–ª–∞—Ç–Ω—ã—Ö –æ–±—Ä—ã–≤–∞—Ö, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è—Ö —Å–ª–æ—è –ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è—Ö —Å–ø–æ—Å–æ–±–µ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤–ª–∞–≥–∏, —Å–∏–º–ø—Ç–æ–º—ã –º–æ–≥—É—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —É–∑–ª–∞—Ö ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–º–ø–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–≥–æ –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–∞ –∏–ª–∏ –±–∞—Ä–æ–º–µ—Ç—Ä–∞. –ü–æ—ç—Ç–æ–º—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —á—ë—Ç–∫–æ–π –æ—à–∏–±–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤—Å—é –ø–µ—Ä–∏—Ñ–µ—Ä–∏—é –≤ —Å–±–æ—Ä–µ, —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –ø–æ–¥–∫–∏–¥—ã–≤–∞—è –∏—Å–ø—Ä–∞–≤–Ω—ã–µ –º–æ–¥—É–ª–∏.
        """, locale=lang),
        i18n.gettext(
            "–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ —Ä–µ–º–æ–Ω—Ç–µ! –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è —É—Ç–æ—á–Ω—è—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–π –æ—à–∏–±–∫–µ ‚Äî –±–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.",
            locale=lang),
    ]

    if callback.message and not isinstance(callback.message, InaccessibleMessage):
        try:
            await callback.message.edit_reply_markup()
            for content in diagnostic_parts:
                await callback.message.answer(text=content, parse_mode='Markdown')
        except Exception as e:
            logger.warning(f"Could not send diagnostics: {e}")

    await callback.answer()


@router.callback_query(FullButtonCallback.filter(F.action == "show_full"))
async def handle_show_full_answer(
    callback_query: CallbackQuery,
    callback_data: FullButtonCallback,
    user: User,
    state: FSMContext,
    i18n: I18n,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç" """
    await callback_query.answer()

    error_code = desanitize_callback_data(callback_data.error_code)
    model_id = callback_data.model
    
    data = await state.get_data()
    key = f"full_answer_{user.user_id}_{error_code}_{model_id}"
    
    if key not in data:
        key = f"full_answer_{user.user_id}_{callback_data.error_code}_{model_id}"
    
    stored_data = data.get(key)

    if not stored_data:
        await callback_query.answer(
            i18n.gettext("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –µ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è.", locale=user.lang), 
            show_alert=True
        )
        try:
            if callback_query.message and not isinstance(callback_query.message, InaccessibleMessage):
                await callback_query.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.warning(f"Could not edit reply markup: {e}")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    full_descriptions = stored_data.get("descriptions")
    full_links = stored_data.get("links", [])
    error_code = stored_data.get("error_code")
    phone_model_name = stored_data.get("phone_model_name")
    phone_model_version = stored_data.get("phone_model_version")
    phone_ios_version = stored_data.get("phone_ios_version")
    date_of_failure = stored_data.get("date_of_failure")

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    phone_for_header = ModelPhone(
        model=phone_model_name,
        version=phone_model_version,
        ios_version=phone_ios_version
    )
    
    solution_for_user_header = SolutionAboutError(
        descriptions=[], 
        links=[], 
        date_of_failure=date_of_failure,
        error_code=error_code,
        is_mini_response_shown=False, 
        has_full_solution_available=False 
    )
    
    user_header_text = template_about_analysis_result_header(
        phone=phone_for_header, 
        solution_about_error=solution_for_user_header,
        i18n=i18n,
        lang=user.lang
    )
    
    solution_for_user_body = SolutionAboutError(
        descriptions=full_descriptions if full_descriptions else [],
        links=full_links if full_links else [],
        date_of_failure=date_of_failure, 
        error_code=error_code,
        is_full=True 
    )
    
    user_body_text = template_about_analysis_result(
        solution_for_user_body,
        i18n=i18n,
        lang=user.lang
    )
    
    user_message_text = f"{user_header_text}\n{user_body_text}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    if callback_query.bot:
        try:
            await callback_query.bot.send_message(
                chat_id=callback_query.from_user.id, 
                text=user_message_text
            )
        except Exception as e:
            logger.error(f"Could not send full answer: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    short_info = _create_short_info_for_consultation(user_message_text, i18n, user.lang)
    
    consultation_keyboard_after_full = Keyboards.create_consultation_button(i18n, user.lang, short_info)
    consultation_message_text_after_full = i18n.gettext(
        "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, "
        "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. üëá\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º, "
        "—á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –±—ã—Å—Ç—Ä–µ–µ –≤–∞–º –ø–æ–º–æ—á—å.",
        locale=user.lang
    )
    
    if callback_query.message and not isinstance(callback_query.message, InaccessibleMessage):
        try:
            await callback_query.message.answer(
                text=consultation_message_text_after_full, 
                reply_markup=consultation_keyboard_after_full
            )
            await callback_query.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.warning(f"Could not send consultation message or edit markup: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    from .feedback import send_admin_notification_for_full_answer
    await send_admin_notification_for_full_answer(callback_query, stored_data, i18n, user)

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if key in data:
        del data[key]
        await state.set_data(data)


def _create_short_info_for_consultation(user_message_text: str, i18n: I18n, lang: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    cleaned_text = re.sub(r'<[^>]+>', '', user_message_text)
    lines = cleaned_text.split('\n')
    
    device_info_header = i18n.gettext("Device Information:", locale=lang)
    model_label = i18n.gettext("üì± –ú–æ–¥–µ–ª—å:", locale=lang)
    ios_label = i18n.gettext("üõ†Ô∏è –í–µ—Ä—Å–∏—è iOS:", locale=lang)
    date_label = i18n.gettext("üìÖ –î–∞—Ç–∞ —Å–±–æ—è:", locale=lang)
    errors_label = i18n.gettext("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É:", locale=lang)
    
    device_info_header_en = "Device Information:"
    model_label_en = "üì± Model:"
    ios_label_en = "üõ†Ô∏è iOS Version:"
    date_label_en = "üìÖ Failure Date:"
    errors_label_en = "Found errors and repair recommendations:"
    
    structured_message = [device_info_header if lang == 'ru' else device_info_header_en]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    for line in lines:
        if any(label in line for label in [model_label, model_label_en]):
            structured_message.append(line.strip())
            break
    
    for line in lines:
        if any(label in line for label in [ios_label, ios_label_en]):
            structured_message.append(line.strip())
            break
    
    for line in lines:
        if any(label in line for label in [date_label, date_label_en]):
            structured_message.append(line.strip())
            break
    
    structured_message.append("")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—à–∏–±–∫–∏
    error_section = False
    error_lines = []
    for line in lines:
        if any(label in line for label in [errors_label, errors_label_en]):
            error_section = True
            error_lines.append(line.strip())
            continue
        if error_section:
            if "token" in line.lower() or "—Ç–æ–∫–µ–Ω" in line.lower() or "subscription" in line.lower() or "–ø–æ–¥–ø–∏—Å–∫" in line.lower():
                break
            if not line.strip() and not error_lines:
                continue
            error_lines.append(line.strip())
    
    structured_message.extend(error_lines)
    short_info = "\n".join(structured_message)
    
    max_text_len = 1500
    if len(short_info) > max_text_len:
        short_info = short_info[:max_text_len] + "..."
        
    return short_info 