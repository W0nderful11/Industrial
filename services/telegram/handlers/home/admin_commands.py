from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.i18n import I18n
from decimal import Decimal

from database.database import ORM
from database.models import User # –ù—É–∂–µ–Ω –¥–ª—è type hinting –∏ RoleFilter
from services.telegram.filters.role import RoleFilter
from services.telegram.misc.keyboards import Keyboards

# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –∏–∑ __init__.py —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
from . import logger

router = Router()
# –§–∏–ª—å—Ç—Ä RoleFilter(roles=["admin"]) –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –∫–∞–∂–¥–æ–º—É —Ö—ç–Ω–¥–ª–µ—Ä—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, 
# —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤ home —è–≤–ª—è—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω—Å–∫–∏–º–∏.
# –û–¥–Ω–∞–∫–æ, –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ - –∞–¥–º–∏–Ω—Å–∫–∏–µ.
router.message.filter(RoleFilter(roles=["admin"]))
# router.callback_query.filter(RoleFilter(roles=["admin"])) # –ï—Å–ª–∏ –±—É–¥—É—Ç callback-—Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —Ç—É—Ç


@router.message(F.text.regexp(r"^\+?\d{5,}\s+\d+$")) # RoleFilter(roles=["admin"]) —É–∂–µ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
async def universal_admin_topup(message: Message, orm: ORM, i18n: I18n):
    admin_user = await orm.user_repo.find_user_by_user_id(message.from_user.id)
    if not admin_user: # admin_user –∑–¥–µ—Å—å —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º
        logger.error(f"Admin user {message.from_user.id} not found in universal_admin_topup.")
        await message.answer(
            i18n.gettext("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.", locale=message.from_user.language_code)
        )
        return

    try:
        text = message.text.lstrip('+').strip()
        user_id_str, amount_str = text.split()
        user_id = int(user_id_str)
        tokens_to_add = int(amount_str)

        if tokens_to_add <= 0:
            await message.answer(
                i18n.gettext("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.", locale=admin_user.lang),
                reply_markup=Keyboards.back_to_home(i18n, admin_user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        target_user = await orm.user_repo.find_user_by_user_id(user_id) # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ø–æ–ª–Ω—è—é—Ç
        if not target_user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=Keyboards.back_to_home(i18n, admin_user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        success = await orm.user_repo.add_tokens(user_id=user_id, tokens_to_add=tokens_to_add,
                                                 admin_id=message.from_user.id)

        if not success:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω).",
                reply_markup=Keyboards.back_to_home(i18n, admin_user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        new_token_balance = await orm.user_repo.get_token_balance(user_id)

        await message.answer(
            i18n.gettext("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {tokens} —Ç–æ–∫–µ–Ω–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ç–æ–∫–µ–Ω–æ–≤.",
                         locale=admin_user.lang).format(
                user_id=user_id,
                tokens=tokens_to_add,
                new_balance=new_token_balance
            ),
            reply_markup=Keyboards.back_to_home(i18n, admin_user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )

    except ValueError:
        await message.answer(
            i18n.gettext(
            "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: + [user_id] [–∫–æ–ª-–≤–æ_—Ç–æ–∫–µ–Ω–æ–≤]. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.",
            locale=admin_user.lang),
            reply_markup=Keyboards.back_to_home(i18n, admin_user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤.",
            reply_markup=Keyboards.back_to_home(i18n, admin_user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )


@router.message(Command("admin_balance")) # RoleFilter(roles=["admin"]) —É–∂–µ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
async def show_admin_menu(message: Message, i18n: I18n, user: User): # –î–æ–±–∞–≤–∏–ª i18n, user –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer(
        i18n.gettext("üîß –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º:", locale=user.lang),
        reply_markup=Keyboards.admin_balance_menu(i18n, user) # –ü–µ—Ä–µ–¥–∞–µ–º i18n –∏ user
    )


@router.message(F.text.regexp(r"^\d+\s+\d+$")) # RoleFilter(roles=["admin"]) —É–∂–µ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
async def admin_manual_topup(message: Message, orm: ORM, i18n: I18n):
    admin_user = await orm.user_repo.find_user_by_user_id(message.from_user.id)
    if not admin_user:
        logger.error(f"Admin user {message.from_user.id} not found in admin_manual_topup.")
        await message.answer(
            i18n.gettext("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.", locale=message.from_user.language_code)
        )
        return
    try:
        user_id_str, amount_str = message.text.strip().split()
        user_id = int(user_id_str)
        amount = Decimal(amount_str)

        target_user = await orm.user_repo.find_user_by_user_id(user_id)
        if not target_user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=Keyboards.back_to_home(i18n, admin_user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        country_code = await orm.user_repo.get_country_code(user_id)
        _, currency_symbol = await orm.currency_repo.get_price_in_user_currency(Decimal("0"), country_code)

        success = await orm.user_repo.update_balance(user_id, amount)
        if not success:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å.",
                reply_markup=Keyboards.back_to_home(i18n, admin_user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}{currency_symbol}",
            reply_markup=Keyboards.back_to_home(i18n, admin_user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ.",
            reply_markup=Keyboards.back_to_home(i18n, admin_user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )


@router.message(F.text.startswith("+")) # RoleFilter(roles=["admin"]) —É–∂–µ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
async def quick_topup_handler(message: Message, user: User, orm: ORM, i18n: I18n):
    # user –∑–¥–µ—Å—å —ç—Ç–æ admin_user, —Ç–∞–∫ –∫–∞–∫ RoleFilter("admin") –ø—Ä–∏–º–µ–Ω–µ–Ω
    try:
        parts = message.text.split()
        if len(parts) != 3 or not parts[1].isdigit() or not parts[2].isdigit(): # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ amount —Ç–æ–∂–µ digit
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ + [user_id] [amount]",
                reply_markup=Keyboards.back_to_home(i18n, user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        user_id_to_topup = int(parts[1])
        tokens_to_add = int(parts[2])

        if not await orm.user_repo.user_exists(user_id_to_topup):
            await message.answer(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_topup} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=Keyboards.back_to_home(i18n, user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        success = await orm.user_repo.add_tokens(user_id=user_id_to_topup, tokens_to_add=tokens_to_add,
                                                 admin_id=message.from_user.id)
        if not success:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤",
                reply_markup=Keyboards.back_to_home(i18n, user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        new_token_balance = await orm.user_repo.get_token_balance(user_id_to_topup)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_topup} –¥–æ–±–∞–≤–ª–µ–Ω–æ {tokens_to_add} —Ç–æ–∫–µ–Ω–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_token_balance} —Ç–æ–∫–µ–Ω–æ–≤.",
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )

    except ValueError as e: # –ï—Å–ª–∏ int() –Ω–µ —É–¥–∞–ª—Å—è
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ + [user_id] [amount]",
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Critical error in quick_topup_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )


@router.message(F.text.startswith("-")) # RoleFilter(roles=["admin"]) —É–∂–µ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
async def quick_deduct_handler(message: Message, user: User, orm: ORM, i18n: I18n):
    # user –∑–¥–µ—Å—å —ç—Ç–æ admin_user
    try:
        text = message.text.lstrip('-').strip() # –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Å –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        parts = text.split()

        if len(parts) != 2 or not parts[0].isdigit() or not parts[1].isdigit():
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -[user_id] [amount]",
                reply_markup=Keyboards.back_to_home(i18n, user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        user_id_to_deduct = int(parts[0])
        tokens_to_deduct = int(parts[1])

        if not await orm.user_repo.user_exists(user_id_to_deduct):
            await message.answer(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_deduct} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=Keyboards.back_to_home(i18n, user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        current_token_balance = await orm.user_repo.get_token_balance(user_id_to_deduct)
        if current_token_balance < tokens_to_deduct:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_token_balance}",
                reply_markup=Keyboards.back_to_home(i18n, user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        success = await orm.user_repo.deduct_tokens(user_id=user_id_to_deduct, tokens_to_deduct=tokens_to_deduct,
                                                    admin_id=message.from_user.id)
        if not success:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤",
                reply_markup=Keyboards.back_to_home(i18n, user),
                reply_to_message_id=message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
            return

        new_token_balance = await orm.user_repo.get_token_balance(user_id_to_deduct)
        await message.answer(
            f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_deduct} —Å–ø–∏—Å–∞–Ω–æ {tokens_to_deduct} —Ç–æ–∫–µ–Ω–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_token_balance} —Ç–æ–∫–µ–Ω–æ–≤.",
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )

    except ValueError as e: # –ï—Å–ª–∏ int() –Ω–µ —É–¥–∞–ª—Å—è
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -[user_id] [amount]",
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Critical error in quick_deduct_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )


@router.message(F.text == "Admin panel ‚öôÔ∏è")
@router.message(F.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚öôÔ∏è") # RoleFilter(roles=["admin"]) —É–∂–µ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
async def open_admin_panel(message: Message, user: User, i18n: I18n):
    # user –∑–¥–µ—Å—å —ç—Ç–æ admin_user, —Ç–∞–∫ –∫–∞–∫ RoleFilter("admin") –ø—Ä–∏–º–µ–Ω–µ–Ω
    admin_keyboard = Keyboards.admin_panel(i18n, user)
    # –û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    await message.answer(i18n.gettext("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!", locale='ru'), reply_markup=admin_keyboard) 