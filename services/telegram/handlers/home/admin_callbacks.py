from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message # Message –¥–ª—è callback.message
from aiogram.utils.i18n import I18n
from aiogram.utils.markdown import hcode

from database.database import ORM
from database.models import User
from services.telegram.filters.role import RoleFilter
from services.telegram.misc.callbacks import UserListPagination
from services.telegram.misc.keyboards import Keyboards
from services.telegram.handlers.states import DeleteUserStates, BalanceStates, AdminStates

# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –∏–∑ __init__.py —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
from . import logger

router = Router()
# –í—Å–µ callback —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
router.callback_query.filter(RoleFilter(roles=["admin"]))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è users_list –∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
# –û–Ω –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Å–∞–º –ø–æ —Å–µ–±–µ –∫–∞–∫ callback, –∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏.
async def show_users_page(callback: CallbackQuery, orm: ORM, i18n: I18n, user: User, page: int):
    users_db = await orm.user_repo.find_all()

    users_per_page = 5
    total_pages = (len(users_db) + users_per_page - 1) // users_per_page
    start_idx = page * users_per_page
    end_idx = start_idx + users_per_page
    page_users = users_db[start_idx:end_idx]

    admin_lang = user.lang # –Ø–∑—ã–∫ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫

    message_parts = [i18n.gettext("üìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", locale=admin_lang) + "\n\n"]

    for idx, list_user_item in enumerate(page_users, start=start_idx + 1):
        phone_number_display = list_user_item.phone_number or i18n.gettext('–ù–µ —É–∫–∞–∑–∞–Ω', locale=admin_lang)
        user_info = (
            f"üîπ <b>{idx}. {hcode(list_user_item.username or i18n.gettext('–ë–µ–∑ username', locale=admin_lang))}</b>\n"
            f"üÜî <i>{i18n.gettext('ID', locale=admin_lang)}:</i> {hcode(list_user_item.user_id)}\n"
            f"üë§ <i>{i18n.gettext('–†–æ–ª—å', locale=admin_lang)}:</i> {hcode(list_user_item.role)}\n"
            f"üåç <i>{i18n.gettext('–Ø–∑—ã–∫', locale=admin_lang)}:</i> {hcode(list_user_item.lang)}\n"
            f"üì± <i>{i18n.gettext('–¢–µ–ª–µ—Ñ–æ–Ω', locale=admin_lang)}:</i> {hcode(phone_number_display)}\n"
            f"üí∞ {i18n.gettext('–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤', locale=admin_lang)}: {list_user_item.token_balance}\n"
            f"<i>{'‚îÄ' * 30}</i>\n"
        )
        message_parts.append(user_info)

    message_parts.append(f"\n{i18n.gettext('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', locale=admin_lang)}: {len(users_db)}")

    full_message = "".join(message_parts)
    keyboard = Keyboards.get_users_list_keyboard(total_pages, page, i18n, user)

    # –í–∞–∂–Ω–æ: callback.message –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    # –û–¥–Ω–∞–∫–æ, show_users_list –∏ navigate_users_list –∏—Å–ø–æ–ª—å–∑—É—é—Ç callback.message.edit_text –∏–ª–∏ answer
    if callback.message: 
        try:
            await callback.message.edit_text(
                full_message,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        except Exception as e: # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
            logger.warning(f"Could not edit message for users list, sending new one: {e}")
            await callback.bot.send_message( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                callback.from_user.id,
                full_message,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
    else: # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ callback.message –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ None (—Ö–æ—Ç—è —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è —ç—Ç–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤)
         await callback.bot.send_message(
            callback.from_user.id,
            full_message,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    await callback.answer()


@router.callback_query(F.data == "users_list")
async def show_users_list(callback: CallbackQuery, orm: ORM, i18n: I18n, user: User):
    # user –∑–¥–µ—Å—å - –∞–¥–º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    await show_users_page(callback, orm, i18n, user, page=0)


@router.callback_query(UserListPagination.filter())
async def navigate_users_list(callback: CallbackQuery, callback_data: UserListPagination, orm: ORM, i18n: I18n, user: User):
    # user –∑–¥–µ—Å—å - –∞–¥–º–∏–Ω
    await show_users_page(callback, orm, i18n, user, page=callback_data.page)


@router.callback_query(F.data == "back_to_admin")
async def back_to_admin_panel(callback: CallbackQuery, i18n: I18n, user: User):
    # user –∑–¥–µ—Å—å - –∞–¥–º–∏–Ω
    await callback.message.edit_text(
        i18n.gettext("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!", locale=user.lang),
        reply_markup=Keyboards.admin_panel(i18n, user)
    )
    await callback.answer()


@router.callback_query(F.data == "delete_user_by_id")
async def ask_for_user_id_to_delete(callback: CallbackQuery, state: FSMContext, i18n: I18n, user: User):
    # user –∑–¥–µ—Å—å - –∞–¥–º–∏–Ω
    await state.set_state(DeleteUserStates.waiting_for_user_id)
    await callback.message.answer( # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
        i18n.gettext("–í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", locale=user.lang)
    )
    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏


@router.callback_query(F.data == "set_pricing")
async def ask_for_new_price(callback: CallbackQuery, state: FSMContext, i18n: I18n, user: User):
    # user –∑–¥–µ—Å—å - –∞–¥–º–∏–Ω
    await callback.message.answer(
        i18n.gettext("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", locale=user.lang)
    )
    await state.set_state(BalanceStates.waiting_for_pricing)
    await callback.answer()


@router.callback_query(F.data == "admin_topup")
async def start_admin_topup(callback: CallbackQuery, state: FSMContext, i18n: I18n, user: User):
    # user –∑–¥–µ—Å—å - –∞–¥–º–∏–Ω
    await state.set_state(AdminStates.admin_topup_wait)
    await callback.message.answer(
        i18n.gettext(
            "enter_user_id_and_amount", # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–∞–π–ª–∞—Ö –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            locale=user.lang 
        ),
        parse_mode=ParseMode.HTML # –ö–∞–∫ –±—ã–ª–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    )
    await callback.answer()


@router.callback_query(F.data == "admin_check_balance")
async def ask_user_id_for_check(callback: CallbackQuery, state: FSMContext, i18n: I18n, user: User):
    # user –∑–¥–µ—Å—å - –∞–¥–º–∏–Ω
    await state.set_state("admin_check_balance_wait") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    await callback.message.answer(
        i18n.gettext("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", locale=user.lang)
    )
    await callback.answer()


@router.callback_query(F.data == "admin_history")
async def ask_user_id_for_history(callback: CallbackQuery, state: FSMContext, i18n: I18n, user: User):
    # user –∑–¥–µ—Å—å - –∞–¥–º–∏–Ω
    await state.set_state("admin_history_wait") # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback.message.answer(
        i18n.gettext("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", locale=user.lang)
    )
    await callback.answer()


@router.callback_query(F.data == "admin_reset_balance")
async def ask_user_id_for_reset(callback: CallbackQuery, state: FSMContext, i18n: I18n, user: User):
    # user –∑–¥–µ—Å—å - –∞–¥–º–∏–Ω
    await state.set_state("admin_reset_wait") # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback.message.answer(
        i18n.gettext("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", locale=user.lang)
    )
    await callback.answer()


@router.callback_query(F.data == "nothing")
async def nothing_callback(callback: CallbackQuery):
    await callback.answer() 