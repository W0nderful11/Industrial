from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import cast
from aiogram.utils.i18n import I18n
from decimal import Decimal, InvalidOperation
import math
import html

from database.database import ORM
from database.models import User
from services.telegram.filters.role import RoleFilter
from services.telegram.misc.callbacks import LangCallback, ResistorCalculatorCallback, ResistorCalculatorTypeCallback, ResistorCallback
from services.telegram.misc.keyboards import Keyboards
from services.analyzer.nand import NandList # –î–ª—è find_command

# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –∏ CHANNEL_URL –∏–∑ __init__.py —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
from . import logger, CHANNEL_URL

router = Router()
# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ –≤—Å–µ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ, –∫–∞–∫ –±—ã–ª–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º home.py
router.message.filter(RoleFilter(roles=["admin", "user"]))
router.callback_query.filter(RoleFilter(roles=["admin", "user"]))


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
class MenuResistorState(StatesGroup):
    waiting_for_smd_code = State()
    waiting_for_smd_value = State()
    waiting_for_resistance_value = State()
    waiting_for_multiplier_selection = State()
    waiting_for_tolerance_selection = State()


@router.message(F.text == "–ì–ª–∞–≤–Ω–∞—è")
@router.message(Command("start"))
async def home(message: Message, user: User, i18n: I18n):
    reply_markup = Keyboards.home(i18n, user)

    greeting_message = i18n.gettext(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{}üôÇü§ùüèº"
        "\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–±–æ–µ–≤"
        "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨",
        locale=user.lang
    ).format(user.username)

    await message.answer(
        greeting_message,
        reply_markup=reply_markup
    )


@router.message(Command("balance"))
async def show_user_balance(message: Message, orm: ORM, i18n: I18n, user: User):
    if not message.from_user:
        return
    
    if not orm or not orm.user_repo:
        await message.answer(
            "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
        return
        
    token_balance = await orm.user_repo.get_token_balance(message.from_user.id)
    await message.answer(
        i18n.gettext("üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {} —Ç–æ–∫–µ–Ω–æ–≤.", locale=user.lang).format(token_balance),
        reply_markup=Keyboards.back_to_home(i18n, user),
        reply_to_message_id=message.message_id,
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥")
@router.message(F.text == "Top Up Balance üí≥")
async def request_topup_balance(message: Message, orm: ORM, i18n: I18n, user: User):
    price_info = "1 —Ç–æ–∫–µ–Ω = 1$\n"
    user_country_code_raw = user.country
    user_country_code_upper = user_country_code_raw.upper() if user_country_code_raw else None
    base_usd_price = Decimal("1.0")

    if user_country_code_upper and hasattr(orm, 'regional_pricing_repo') and orm.regional_pricing_repo:
        regional_data = await orm.regional_pricing_repo.get_pricing_by_country(user_country_code_upper)
        if regional_data:
            try:
                coeff = Decimal(str(regional_data['coefficient']))
                rate = Decimal(str(regional_data['exchange_rate']))
                symbol = regional_data['symbol']
                raw_price = base_usd_price * coeff * rate
                price = math.ceil(raw_price / 10) * 10
                price_info = f"1 —Ç–æ–∫–µ–Ω = {price} {symbol}\n"
            except (KeyError, TypeError, ValueError, InvalidOperation) as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è {user_country_code_upper}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                price_info = "1 —Ç–æ–∫–µ–Ω = 1$\n"

    admin_contact = "@masterkazakhstan"
    topup_request_message = i18n.gettext(
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n{admin_contact}",
        locale=user.lang
    ).format(admin_contact=admin_contact)

    await message.answer(
        topup_request_message,
        reply_markup=Keyboards.back_to_home(i18n, user),
        reply_to_message_id=message.message_id,
        parse_mode=ParseMode.MARKDOWN
    )

    channel_tokens_target_id = None
    if hasattr(message.bot, 'environment') and message.bot:
        bot_env = getattr(message.bot, 'environment', None)
        if bot_env:
            # logger.info(f"Bot has environment object: {bool(bot_env)}") # Removed for brevity
            if hasattr(bot_env, 'channel_tokens_id'):
                # logger.info(f"Environment has channel_tokens_id attribute: {bot_env.channel_tokens_id}") # Removed
                try:
                    channel_tokens_target_id = int(bot_env.channel_tokens_id)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω channel_tokens_id: {channel_tokens_target_id}")
                except (ValueError, TypeError) as e_parse_id:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å channel_tokens_id '{bot_env.channel_tokens_id}' –≤ int: {e_parse_id}")
            else:
                logger.error("–ê—Ç—Ä–∏–±—É—Ç channel_tokens_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ environment")
        else:
            logger.error("–û–±—ä–µ–∫—Ç environment –≤ –±–æ—Ç–µ –ø—É—Å—Ç–æ–π –∏–ª–∏ None")
    else:
        logger.error("–û–±—ä–µ–∫—Ç bot –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ environment")

    if not message.from_user:
        return
    
    full_name = html.escape(message.from_user.full_name or '')
    username = message.from_user.username

    user_details_parts = []
    if full_name:
        user_details_parts.append(full_name)
    if username:
        user_details_parts.append(f"@{username}")

    user_details = " ".join(user_details_parts)
    if not user_details:
        user_details = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    admin_notification_text = i18n.gettext(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_details} ({user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.",
        locale="ru"
    ).format(user_details=user_details, user_id=user.user_id)

    admin_instructions = (
        f"\n*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞:*\n"
        f"—á—Ç–æ–± —Å–ø–∏—Å–∞—Ç—å: `-{(user.user_id)} 10`\n"
        f"—á—Ç–æ–± –ø–æ–ø–æ–ª–Ω–∏—Ç—å: `+{(user.user_id)} 10`"
    )
    admin_notification_text += admin_instructions

    if channel_tokens_target_id and message.bot:
        try:
            await message.bot.send_message(
                channel_tokens_target_id,
                admin_notification_text,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ –∫–∞–Ω–∞–ª {channel_tokens_target_id}")
            return
        except Exception as channel_err:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª {channel_tokens_target_id}: {channel_err}")
    else:
        logger.error("CHANNEL_TOKENS_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º.")

    if not message.bot:
        logger.error("Bot object is None, cannot send admin notifications")
        return

    if orm and orm.user_repo:
        try:
            admins = await orm.user_repo.get_admins()
            if admins:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(admins)} –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {[a.user_id for a in admins]}")
                for admin in admins:
                    try:
                        await message.bot.send_message(
                            admin.user_id,
                            admin_notification_text,
                            parse_mode=ParseMode.MARKDOWN
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä—è–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω—É {admin.user_id}")
                    except Exception as admin_err:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—É {admin.user_id}: {admin_err}")
            else:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        except Exception as backup_err:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: {backup_err}")
    else:
        logger.error("ORM –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è " + "üìï")
@router.message(F.text == "Instructions " + "üìï")
async def instruction(message: Message, user: User, i18n: I18n):
    text = i18n.gettext(
        "üì• *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*:\n"
        "‚úÖ *–õ—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å*:\n"
        "‚Ä¢ .ips —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, panic-full-[data].ips)\n"
        "‚Ä¢ .txt —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ 3uTools)\n"
        "–≠—Ç–æ –¥–∞—Å—Ç *–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑!*\n"
        "‚∏ª\n"
        "üì∏ *–¢–∞–∫–∂–µ –¥–æ–ø—É—Å—Ç–∏–º—ã*:\n"
        "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ *–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ* panic-—Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω *–≤–µ—Ä—Ö —Ñ–∞–π–ª–∞* (—Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞)\n"
        "‚Ä¢ –ë–µ–∑ –±–ª–∏–∫–æ–≤ –∏ —Ä–∞–∑–º—ã—Ç–∏–π\n\n"
        "–§–∞–π–ª—ã –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä—è–º–æ —Å—é–¥–∞, –∫–∞–∫ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–∞–∫ –∏ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n"
        "‚∏ª\n"
        "üîç *–ö–∞–∫ –Ω–∞–π—Ç–∏ panic-—Ñ–∞–π–ª –Ω–∞ iPhone*:\n"
        " 1. –û—Ç–∫—Ä–æ–π—Ç–µ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n"
        " 2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å*\n"
        " 3. –í—ã–±–µ—Ä–∏—Ç–µ *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è*\n"
        " 4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏*\n"
        " 5. –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å panic-full-...\n"
        "–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å *–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤*.\n"
        "‚∏ª\n"
        "üí∞ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –±–æ–Ω—É—Å—ã*:\n"
        "‚Ä¢ *1 —Ç–æ–∫–µ–Ω —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ*\n"
        "‚Ä¢ üìä *–ë–æ–Ω—É—Å*: –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –µ—â—ë 9 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è –Ω–µ–≥–æ, —Å—Ä–æ–∫–æ–º –Ω–∞ 30 –¥–Ω–µ–π\n"
        "‚Ä¢ üóìÔ∏è *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å*: 1-–≥–æ —á–∏—Å–ª–∞ –≤ 00:05 –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ *+1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω*",
        locale=user.lang)

    await message.answer(
        text,
        reply_markup=Keyboards.back_to_home(i18n, user),
        reply_to_message_id=message.message_id,
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(F.text == "–ú–æ–π –±–∞–ª–∞–Ω—Å üí∞")
@router.message(F.text == "My Balance üí∞")
async def show_balance(message: Message, user: User, orm: ORM, i18n: I18n):
    if not message.from_user:
        return
    
    if not orm or not orm.user_repo:
        await message.answer(
            "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
        return
        
    token_balance = await orm.user_repo.get_token_balance(message.from_user.id)
    await message.answer(
        i18n.gettext("üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {} —Ç–æ–∫–µ–Ω–æ–≤.", locale=user.lang).format(token_balance),
        reply_markup=Keyboards.back_to_home(i18n, user),
        reply_to_message_id=message.message_id,
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞" + " üîó")
@router.message(F.text == "Referral link" + " üîó")
async def show_referral_link(message: Message, user: User, i18n: I18n, bot: Bot):
    bot_user = await bot.get_me()
    referral_link = f"https://t.me/{bot_user.username}?start={user.user_id}"
    text = i18n.gettext(
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ 2 —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n"
        "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}",
        locale=user.lang
    ).format(referral_link=referral_link)
    await message.answer(
        text,
        reply_markup=Keyboards.back_to_home(i18n, user),
        disable_web_page_preview=True
    )


@router.message(F.text == "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ " + "üè≥Ô∏è")
@router.message(F.text == "Change language " + "üè≥Ô∏è")
async def change_language(message: Message, user: User, i18n: I18n, state: FSMContext):
    await state.clear()
    await message.answer(i18n.gettext("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", locale=user.lang),
                         reply_markup=Keyboards.lang())


@router.callback_query(LangCallback.filter())
async def change_language_callback(callback: CallbackQuery,
                                   callback_data: LangCallback,
                                   i18n: I18n,
                                   orm: ORM,
                                   state: FSMContext):
    if not callback.from_user:
        return
    
    if not orm or not orm.user_repo:
        await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    
    logger.info(f"Language change request: user_id={callback.from_user.id}, requested_lang={callback_data.lang}")
    
    await orm.user_repo.upsert_user(callback.from_user.id, lang=callback_data.lang)
    updated_user = await orm.user_repo.find_user_by_user_id(callback.from_user.id)
    user_lang_to_use = updated_user.lang if updated_user else callback_data.lang
    
    logger.info(f"Language change result: user_id={callback.from_user.id}, saved_lang={updated_user.lang if updated_user else 'None'}, using_lang={user_lang_to_use}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if callback.from_user:
        try:
            bot = callback.bot
            if bot:
                message_text = i18n.gettext("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω", locale=user_lang_to_use)
                logger.info(f"Sending language changed message in {user_lang_to_use}: '{message_text}'")
                await bot.send_message(
                    callback.from_user.id,
                    message_text,
                    reply_markup=Keyboards.home(i18n, updated_user or callback.from_user)
                )
        except Exception as send_err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_err}")
    await state.clear()


@router.message(F.text == "–ù–∞–∑–∞–¥ " + "‚óÄÔ∏è")
@router.message(F.text == "Back " + "‚óÄÔ∏è")
async def back_to_home(message: Message, user: User, i18n: I18n):
    await message.answer(
        i18n.gettext(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{}üôÇü§ùüèº"
            "\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–±–æ–µ–≤"
            "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨",
            locale=user.lang).format(user.username),
        reply_markup=Keyboards.home(i18n, user))


@router.message(F.text == "–ù–∞—à –∫–∞–Ω–∞–ª " + "üë•")
@router.message(F.text == "Our channel " + "üë•")
async def open_channel(message: Message, i18n: I18n, user: User):
    channel_text = i18n.gettext("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {channel_url}", locale=user.lang).format(channel_url=CHANNEL_URL)
    await message.answer(
        channel_text,
        reply_markup=Keyboards.back_to_home(i18n, user),
        reply_to_message_id=message.message_id,
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(F.text == ("Disk directory") + " üìö")
@router.message(F.text == ("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–∏—Å–∫–æ–≤") + " üìö")
async def send_disk_guide(message: Message, i18n: I18n, user: User):
    keyboard = get_inline_button(i18n, user.lang)
    text_to_send = i18n.gettext("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –¥–∏—Å–∫–æ–≤:", locale=user.lang)
    await message.answer(
        text_to_send,
        reply_markup=keyboard,
    )


def get_inline_button(i18n: I18n, lang: str):
    button_text = i18n.gettext("–ò—Å–∫–∞—Ç—å –¥–∏—Å–∫ üîç", locale=lang)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text,
                    switch_inline_query_current_chat="disk ",
                )
            ]
        ]
    )
    return keyboard


@router.message(Command("disk"))
async def find_command(message: Message, user: User, orm: ORM, i18n: I18n):
    if not message.text:
        return
    command_parts = message.text.split(" ", 1)
    if len(command_parts) < 2 or not command_parts[1].strip():
        logger.warning(f"Disk command received without model name: '{message.text}' from user {user.user_id}")
        await message.answer(
            i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /disk.", locale=user.lang),
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
        return

    model_name_query = command_parts[1].strip()
    user_lang = user.lang
    logger.info(
        f"Command '/disk' received. Model query: '{model_name_query}', User lang: {user_lang}, User ID: {user.user_id}")

    nand = NandList()
    if not nand.sheet:
        logger.error("NandList sheet is not loaded. Cannot process /disk command.")
        await message.answer(
            i18n.gettext("–û—à–∏–±–∫–∞: —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–∏—Å–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", locale=user.lang),
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
        return

    answer = nand.find_info(model_name_query, user_lang)

    if answer:
        logger.info(f"Found info for model '{model_name_query}' for lang '{user_lang}':\n{answer}")
        # –í–∞–∂–Ω–æ: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª Keyboards.back_to_home —Å—é–¥–∞, —Ç.–∫. —ç—Ç–æ –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –±—ã–ª–æ.
        await message.answer(
            str(answer),
            reply_markup=Keyboards.back_to_home(i18n, user), # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ –æ–±—â–µ–π –ª–æ–≥–∏–∫–µ
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ –æ–±—â–µ–π –ª–æ–≥–∏–∫–µ
            ) 
    else:
        logger.warning(f"No info found for model '{model_name_query}' for lang '{user_lang}'.")
        all_models = nand.get_models()
        similar_models = [m['name'] for m in all_models if model_name_query.lower() in m['name'].lower()]
        if similar_models:
            suggestions = "\n".join([f"- {sm}" for sm in similar_models[:5]])
            response_text = i18n.gettext(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–µ –ø–æ '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏—Å–∫–∞–ª–∏:\n{suggestions}",
                locale=user.lang).format(model_name=model_name_query, suggestions=suggestions)
        else:
            response_text = i18n.gettext("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–µ –ø–æ '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", locale=user.lang).format(
                model_name=model_name_query)
        await message.answer(
            response_text,
            reply_markup=Keyboards.back_to_home(i18n, user),
            reply_to_message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )


@router.message(F.text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤ üßÆ")
@router.message(F.text == "Resistor Calculator üßÆ")
async def resistor_calculator_menu(message: Message, user: User, i18n: I18n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤."""
    text = i18n.gettext(
        "üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:",
        locale=user.lang
    )
    
    await message.answer(
        text,
        reply_markup=Keyboards.resistor_calculator_menu(i18n, user),
        parse_mode=ParseMode.MARKDOWN
    )


@router.callback_query(ResistorCalculatorTypeCallback.filter())
async def handle_resistor_calculator_type(
    callback: CallbackQuery,
    callback_data: ResistorCalculatorTypeCallback,
    user: User,
    i18n: I18n,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤."""
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return
    
    calc_type = callback_data.calculator_type
    
    if calc_type == "color":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ (color ‚Üí value)
        from services.telegram.handlers.tools.resistor_calculator import start_color_to_value_calculator
        await start_color_to_value_calculator(callback, state, user, i18n)
        
    elif calc_type == "reverse_color":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ (value ‚Üí color)  
        await state.set_state(MenuResistorState.waiting_for_resistance_value)
        try:
            if callback.message and hasattr(callback.message, 'edit_text') and hasattr(callback.message, 'message_id'):
                msg = cast(Message, callback.message)
                await msg.edit_text(
                    i18n.gettext(
                        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.7, 150, 22).\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'R' –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π –∑–Ω–∞–∫ (4R7 = 4.7).",
                        locale=user.lang
                    ),
                    parse_mode=None  # –£–±–∏—Ä–∞–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
    elif calc_type == "smd_code":
        # –ó–∞–ø—É—Å–∫–∞–µ–º SMD –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–æ–¥ ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ
        await state.set_state(MenuResistorState.waiting_for_smd_code)
        try:
            if callback.message and hasattr(callback.message, 'edit_text') and hasattr(callback.message, 'message_id'):
                msg = cast(Message, callback.message)
                await msg.edit_text(
                    i18n.gettext(
                        "üì± <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä SMD-—Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤</b>\n\n"
                        "–Ø –º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ–º–∏–Ω–∞–ª –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–π—Ç–∏ –∫–æ–¥ –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É.\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ SMD –∫–æ–¥ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞:\n\n"
                        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ –∫–æ–¥—É (—Ä–µ–∂–∏–º '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ –∫–æ–¥—É'):</b>\n"
                        "‚Ä¢ <code>103</code> (3 —Ü–∏—Ñ—Ä—ã)\n"
                        "‚Ä¢ <code>4702</code> (4 —Ü–∏—Ñ—Ä—ã)\n"
                        "‚Ä¢ <code>4R7</code> (—Å 'R')\n"
                        "‚Ä¢ <code>01A</code> (EIA-96)",
                        locale=user.lang
                    ),
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    elif calc_type == "smd_value":
        # –ó–∞–ø—É—Å–∫–∞–µ–º SMD –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–µ ‚Üí –∫–æ–¥
        await state.set_state(MenuResistorState.waiting_for_smd_value)
        try:
            if callback.message and hasattr(callback.message, 'edit_text') and hasattr(callback.message, 'message_id'):
                msg = cast(Message, callback.message)
                await msg.edit_text(
                    i18n.gettext(
                        "‚öôÔ∏è <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä SMD-—Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤</b>\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMD –∫–æ–¥–∞:\n\n"
                        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É (—Ä–µ–∂–∏–º '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É'):</b>\n"
                        "‚Ä¢ <code>10k</code>\n"
                        "‚Ä¢ <code>4.7M</code>\n"
                        "‚Ä¢ <code>150</code> (–±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–æ –∫–∞–∫ 150 –û–º)",
                        locale=user.lang
                    ),
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞ –∏–∑ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---

@router.message(MenuResistorState.waiting_for_smd_code)
async def process_menu_smd_code(message: Message, state: FSMContext, user: User, i18n: I18n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ SMD –∫–æ–¥–∞ –∏–∑ –º–µ–Ω—é."""
    if not message.text:
        return
    
    code = message.text.strip()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SMD –∫–æ–¥–∞
    from services.telegram.handlers.tools.resistor_calculator import process_smd_code_calculation
    await process_smd_code_calculation(message, code, user, i18n)
    await state.clear()


@router.message(MenuResistorState.waiting_for_smd_value)
async def process_menu_smd_value(message: Message, state: FSMContext, user: User, i18n: I18n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–∏–Ω–∞–ª–∞ –¥–ª—è SMD –∫–æ–¥–∞ –∏–∑ –º–µ–Ω—é."""
    if not message.text:
        return
    
    value_str = message.text.strip()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–∏–Ω–∞–ª–∞
    from services.telegram.handlers.tools.resistor_calculator import process_smd_value
    await process_smd_value(message, state, user, i18n, provided_value=value_str)
    await state.clear()


@router.message(MenuResistorState.waiting_for_resistance_value)
async def process_menu_resistance_value(message: Message, state: FSMContext, user: User, i18n: I18n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–∏–Ω–∞–ª–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –∏–∑ –º–µ–Ω—é."""
    if not message.text:
        return
    
    # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /resistor)
    normalized_input = message.text.strip().replace(',', '.')
    
    try:
        # Check for 'R' notation and convert it
        if 'r' in normalized_input.lower():
            value_str = normalized_input.lower().replace('r', '.')
            value = float(value_str)
        else:
            value = float(normalized_input)

        if value <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await message.answer(
            i18n.gettext("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 4.7 –∏–ª–∏ 150.", locale=user.lang)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    await state.update_data(numeric_value=value)
    await state.set_state(MenuResistorState.waiting_for_multiplier_selection)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è, —á—Ç–æ –∏ –≤ /resistor
    from services.telegram.misc.callbacks import ResistorCallback
    
    builder = InlineKeyboardBuilder()
    multipliers = [
        (i18n.gettext("–û–º", locale=user.lang), 1), 
        (i18n.gettext("–∫–û–º", locale=user.lang), 1e3), 
        (i18n.gettext("–ú–û–º", locale=user.lang), 1e6), 
        (i18n.gettext("–ì–û–º", locale=user.lang), 1e9)
    ]
    for name, value_mult in multipliers:
        builder.button(
            text=name,
            # Using color field to pass multiplier value
            callback_data=ResistorCallback(action="menu_select_multiplier", color=str(value_mult)).pack()
        )
    builder.adjust(4)
    
    await message.answer(
        i18n.gettext("–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:", locale=user.lang), 
        reply_markup=builder.as_markup()
    )


@router.callback_query(ResistorCallback.filter(F.action == "menu_select_multiplier"), MenuResistorState.waiting_for_multiplier_selection)
async def process_menu_multiplier_selection(query: CallbackQuery, callback_data: ResistorCallback, state: FSMContext, user: User, i18n: I18n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    if not callback_data.color:
        return
    
    multiplier = float(callback_data.color)
    data = await state.get_data()
    numeric_value = data.get("numeric_value")

    if numeric_value is None:
        await query.answer(i18n.gettext("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", locale=user.lang), show_alert=True)
        return

    # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /resistor)
    final_value = numeric_value * multiplier
    await state.update_data(value=final_value)
    await state.set_state(MenuResistorState.waiting_for_tolerance_selection)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–æ—á–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ)
    builder = InlineKeyboardBuilder()
    tolerances = [10, 5, 2, 1, 0.5, 0.25, 0.1, 0.05]
    for t in tolerances:
        builder.button(
            text=f"¬±{t}%",
            callback_data=ResistorCallback(action="menu_select_tolerance", color=str(t)).pack()
        )
    builder.adjust(2)

    if isinstance(query.message, Message):
        try:
            await query.message.edit_text(
                i18n.gettext("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å:", locale=user.lang), 
                reply_markup=builder.as_markup()
            )
        except Exception:
            # Skip if message can't be edited
            pass
    await query.answer()


@router.callback_query(ResistorCallback.filter(F.action == "menu_select_tolerance"), MenuResistorState.waiting_for_tolerance_selection)
async def process_menu_tolerance_selection(query: CallbackQuery, callback_data: ResistorCallback, state: FSMContext, user: User, i18n: I18n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    data = await state.get_data()
    
    # Get the final resistance value that was calculated in process_menu_multiplier_selection
    final_value = data.get("value")
    tolerance_str = callback_data.color
    
    if final_value is None or tolerance_str is None:
        if isinstance(query.message, Message):
            await query.message.edit_text(i18n.gettext("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", locale=user.lang))
        await state.clear()
        return

    try:
        tolerance_percent = float(tolerance_str)
    except (ValueError, TypeError):
        if isinstance(query.message, Message):
            await query.message.edit_text(i18n.gettext("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏.", locale=user.lang))
        await state.clear()
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —Ü–≤–µ—Ç–æ–≤, —á—Ç–æ –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    from services.telegram.handlers.tools.resistor_calculator import value_to_colors, format_resistance, COLOR_EMOJIS
    from services.telegram.misc.callbacks import ResistorInfoCallback
    
    colors = value_to_colors(final_value, tolerance_percent)

    if not colors:
        if isinstance(query.message, Message):
            await query.message.edit_text(i18n.gettext("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ü–≤–µ—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞.", locale=user.lang))
        await state.clear()
        return

    color_names = [i18n.gettext(color.capitalize(), locale=user.lang) for color in colors]
    color_lines = [f"{COLOR_EMOJIS.get(color, '‚ùì')} {name}" for color, name in zip(colors, color_names)]

    response = i18n.gettext(
        "üé® <b>–¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è {value} (¬±{tolerance}%):</b>\n\n{colors_list}",
        locale=user.lang
    ).format(
        value=format_resistance(final_value, i18n, user.lang),
        tolerance=tolerance_percent,
        colors_list="\n".join(color_lines)
    )

    builder = InlineKeyboardBuilder()
    builder.button(
        text=i18n.gettext("–ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ—â–Ω–æ—Å—Ç—å –Ω–∞ –≥–ª–∞–∑?", locale=user.lang),
        callback_data=ResistorInfoCallback(action="show_power_image").pack()
    )
    
    if isinstance(query.message, Message):
        try:
            await query.message.edit_text(response, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.answer(response, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await state.clear()
    await query.answer() 