import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InaccessibleMessage
from aiogram.utils.i18n import I18n
from aiogram.enums import ParseMode
from typing import Union
import urllib.parse

from database.database import ORM
from database.models import User
from services.telegram.filters.role import RoleFilter
from services.telegram.misc.callbacks import (
    AnalysisHistoryCallback, AnalysisDetailCallback, 
    AnalysisHistoryPagination, AnalysisFilterCallback
)
from services.telegram.misc.keyboards import Keyboards

logger = logging.getLogger(__name__)
router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ –≤—Å–µ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ
router.message.filter(RoleFilter(roles=["admin", "user"]))
router.callback_query.filter(RoleFilter(roles=["admin", "user"]))


@router.message(
    (F.text.contains("–ú–æ–∏ –∞–Ω–∞–ª–∏–∑—ã") | F.text.contains("My Analyses")) & 
    F.text.contains("üìä")
)
async def show_analysis_history_main(message: Message, user: User, orm: ORM, i18n: I18n):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤."""
    try:
        if not orm or not hasattr(orm, 'analysis_history_repo') or not orm.analysis_history_repo or not orm.async_sessionmaker:
            await message.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            stats = await history_repo.get_user_statistics(user.user_id)
        
        text = i18n.gettext(
            "üìä *–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤*\n\n"
            "üìà *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            "‚Ä¢ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {total}\n"
            "‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful} ‚úÖ\n"
            "‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed} ‚ùå\n"
            "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n",
            locale=user.lang
        ).format(
            total=stats["total_analyses"],
            successful=stats["successful_analyses"],
            failed=stats["failed_analyses"],
            success_rate=stats["success_rate"]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
        if stats["file_types"]:
            text += i18n.gettext("üìÑ *–ü–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤:*\n", locale=user.lang)
            for file_type, count in stats["file_types"].items():
                emoji = {
                    "ips": "üìÑ",
                    "txt": "üìù",
                    "photo": "üñºÔ∏è", 
                    "json": "üîß"
                }.get(file_type, "üìÑ")
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
                file_type_display = {
                    "ips": ".ips",
                    "txt": ".txt", 
                    "photo": i18n.gettext("—Ñ–æ—Ç–æ", locale=user.lang),
                    "json": ".json"
                }.get(file_type, file_type)
                
                text += f"‚Ä¢ {emoji} {file_type_display}: {count}\n"
        
        text += i18n.gettext(
            "\n_–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π, –∑–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è._\n"
            "_–í Telegram —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–Ω—å—à–µ —Å—Ä–æ–∫–∞._",
            locale=user.lang
        )
        
        keyboard = Keyboards.analysis_history_main(i18n, user, stats["total_analyses"])
        
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Error showing analysis history main: {e}")
        await message.answer(
            i18n.gettext("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤", locale=user.lang)
        )


@router.callback_query(AnalysisHistoryCallback.filter(F.action == "list"))
async def show_analysis_list(
    callback: CallbackQuery, 
    callback_data: AnalysisHistoryCallback,
    user: User, 
    orm: ORM, 
    i18n: I18n
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        if not orm or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang), 
                show_alert=True
            )
            return
            
        page = callback_data.page or 0
        page_size = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            history_data = await history_repo.get_user_history(
                user_id=user.user_id,
                page=page,
                page_size=page_size
            )
        
        analyses = history_data["analyses"]
        total_pages = history_data["total_pages"]
        
        if not analyses:
            text = i18n.gettext(
                "üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏!",
                locale=user.lang
            )
            keyboard = Keyboards.analysis_history_main(i18n, user)
        else:
            text = i18n.gettext(
                "üìä *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã:*\n\n", 
                locale=user.lang
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤
            for i, analysis in enumerate(analyses, 1):
                number = page * page_size + i
                device_emoji = "üì±" if analysis.device_model and ("iPhone" in analysis.device_model or "iPad" in analysis.device_model) else "üì±"
                
                file_type_emoji = {
                    "ips": "üìÑ",
                    "txt": "üìù", 
                    "photo": "üñºÔ∏è",
                    "json": "üîß"
                }.get(analysis.file_type, "üìÑ")
                
                status_text = i18n.gettext("‚úÖ Solution found", locale=user.lang) if analysis.is_solution_found else i18n.gettext("‚ùå Solution not found", locale=user.lang)
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown
                device_name = analysis.device_model or i18n.gettext("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", locale=user.lang)
                device_name = device_name.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
                
                ios_version = analysis.ios_version or ""
                ios_version = ios_version.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                file_type_display = {
                    "ips": ".ips",
                    "txt": ".txt", 
                    "photo": "photo",
                    "json": ".json"
                }.get(analysis.file_type, analysis.file_type or "file")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_str = analysis.created_at.strftime("%d.%m.%Y, %H:%M")
                
                text += i18n.gettext(
                    "   {number}. {device_emoji} {device}, {ios}\n"
                    "      {file_emoji} –¢–∏–ø: {file_type}\n"
                    "      üìÖ {date}\n"
                    "      {status}\n\n",
                    locale=user.lang
                ).format(
                    number=number,
                    device_emoji=device_emoji,
                    device=device_name,
                    ios=ios_version,
                    file_emoji=file_type_emoji,
                    file_type=file_type_display,
                    date=date_str,
                    status=status_text
                )
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ - —É–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
            # current_start = page * page_size + 1
            # current_end = min((page + 1) * page_size, history_data["total_count"])
            
            # text += i18n.gettext(
            #     "\\[{current_start}\\-{current_end} –∏–∑ {total}\\] ‚óÄÔ∏è ‚ñ∂Ô∏è",
            #     locale=user.lang
            # ).format(
            #     current_start=current_start,
            #     current_end=current_end,
            #     total=history_data["total_count"]
            # )
            
            keyboard = Keyboards.analysis_history_list(
                i18n, user, analyses, page, total_pages
            )
        
        try:
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(  # type: ignore
                    text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.warning(f"Could not edit message: {e}")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing analysis list: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞", locale=user.lang)
        )


@router.callback_query(AnalysisDetailCallback.filter(F.action == "view"))
async def show_analysis_detail(
    callback: CallbackQuery,
    callback_data: AnalysisDetailCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ."""
    try:
        if not orm or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang), 
                show_alert=True
            )
            return
            
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            analysis = await history_repo.get_analysis_by_id(
                callback_data.analysis_id, user.user_id
            )
        
        if not analysis:
            await callback.answer(
                i18n.gettext("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", locale=user.lang)
            )
            return
            
        device_emoji = "üì±" if analysis.device_model and ("iPhone" in analysis.device_model or "iPad" in analysis.device_model) else "üì±"
        date_str = analysis.created_at.strftime("%d.%m.%Y, %H:%M")
        
        text = i18n.gettext(
            "{device_emoji} *{device}, {ios}*\n"
            "üìÑ –§–∞–π–ª: {filename}\n"
            "üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {date}\n\n",
            locale=user.lang
        ).format(
            device_emoji=device_emoji,
            device=analysis.device_model or i18n.gettext("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", locale=user.lang),
            ios=analysis.ios_version or "",
            filename=analysis.original_filename or i18n.gettext("—Ñ–∞–π–ª", locale=user.lang),
            date=date_str
        )
        
        if analysis.is_solution_found and analysis.solution_text:
            text += i18n.gettext("üìã *–†–µ—à–µ–Ω–∏–µ:*\n{solution}\n\n", locale=user.lang).format(
                solution=analysis.solution_text
            )
        else:
            text += i18n.gettext("‚ùå *–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n", locale=user.lang)
            
        if analysis.tokens_used > 0:
            text += i18n.gettext("üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens}\n", locale=user.lang).format(
                tokens=analysis.tokens_used
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        async with orm.async_sessionmaker() as session:
            history_repo = AnalysisHistoryRepo(session)
            can_repeat, error_message = await history_repo.can_repeat_analysis(
                analysis.id, user.user_id
            )
            
            attempts_info = None
            if analysis.repeat_attempts > 0:
                attempts_info = i18n.gettext(
                    "üîÑ –ö—Ä—É–≥ {current} –∏–∑ 2", 
                    locale=user.lang
                ).format(current=analysis.repeat_attempts)
        
        keyboard = Keyboards.analysis_detail(i18n, user, analysis, can_repeat, attempts_info)
        
        try:
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(  # type: ignore
                    text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.warning(f"Could not edit message: {e}")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing analysis detail: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏–∑–∞", locale=user.lang)
        )


@router.callback_query(AnalysisDetailCallback.filter(F.action == "delete"))
async def confirm_delete_analysis(
    callback: CallbackQuery,
    callback_data: AnalysisDetailCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞."""
    text = i18n.gettext(
        "‚ùóÔ∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        locale=user.lang
    )
    
    keyboard = Keyboards.analysis_delete_confirm(i18n, user, callback_data.analysis_id)
    
    try:
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(  # type: ignore
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.warning(f"Could not edit message: {e}")
    await callback.answer()


@router.callback_query(AnalysisDetailCallback.filter(F.action == "confirm_delete"))
async def delete_analysis(
    callback: CallbackQuery,
    callback_data: AnalysisDetailCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–£–¥–∞–ª–∏—Ç—å –∞–Ω–∞–ª–∏–∑."""
    try:
        if not orm or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang), 
                show_alert=True
            )
            return
            
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            success = await history_repo.delete_analysis(
                callback_data.analysis_id, user.user_id
            )
        
        if success:
            text = i18n.gettext("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", locale=user.lang)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await show_analysis_list(
                callback, 
                AnalysisHistoryCallback(action="list", page=0),
                user, orm, i18n
            )
        else:
            await callback.answer(
                i18n.gettext("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–∞–ª–∏–∑", locale=user.lang)
            )
            
    except Exception as e:
        logger.error(f"Error deleting analysis: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", locale=user.lang)
        )



@router.callback_query(AnalysisHistoryCallback.filter(F.action == "main"))
async def return_to_main(
    callback: CallbackQuery,
    callback_data: AnalysisHistoryCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤."""
    try:
        if not orm or not hasattr(orm, 'analysis_history_repo') or not orm.analysis_history_repo or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang),
                show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            stats = await history_repo.get_user_statistics(user.user_id)
        
        text = i18n.gettext(
            "üìä *–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤*\n\n"
            "üìà *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            "‚Ä¢ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {total}\n"
            "‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful} ‚úÖ\n"
            "‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed} ‚ùå\n"
            "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n",
            locale=user.lang
        ).format(
            total=stats["total_analyses"],
            successful=stats["successful_analyses"],
            failed=stats["failed_analyses"],
            success_rate=stats["success_rate"]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
        if stats["file_types"]:
            text += i18n.gettext("üìÑ *–ü–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤:*\n", locale=user.lang)
            for file_type, count in stats["file_types"].items():
                emoji = {
                    "ips": "üìÑ",
                    "txt": "üìù",
                    "photo": "üñºÔ∏è", 
                    "json": "üîß"
                }.get(file_type, "üìÑ")
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
                file_type_display = {
                    "ips": ".ips",
                    "txt": ".txt", 
                    "photo": i18n.gettext("—Ñ–æ—Ç–æ", locale=user.lang),
                    "json": ".json"
                }.get(file_type, file_type)
                
                text += f"‚Ä¢ {emoji} {file_type_display}: {count}\n"
        
        text += i18n.gettext(
            "\n_–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π, –∑–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è._\n"
            "_–í Telegram —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–Ω—å—à–µ —Å—Ä–æ–∫–∞._",
            locale=user.lang
        )
        
        keyboard = Keyboards.analysis_history_main(i18n, user, stats["total_analyses"])
        
        try:
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(  # type: ignore
                    text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.warning(f"Could not edit message: {e}")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error returning to main: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", locale=user.lang)
        )


@router.callback_query(AnalysisHistoryPagination.filter())
async def handle_history_pagination(
    callback: CallbackQuery,
    callback_data: AnalysisHistoryPagination,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""
    try:
        if not orm or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang), 
                show_alert=True
            )
            return
            
        page = callback_data.page
        page_size = 5  # –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã 5
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            history_data = await history_repo.get_user_history(
                user_id=user.user_id,
                page=0,  # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                page_size=page_size
            )
        
        total_pages = history_data["total_pages"]
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
        if page >= total_pages and total_pages > 0:
            page = 0  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        elif page < 0:
            page = max(0, total_pages - 1)  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        history_callback = AnalysisHistoryCallback(action="list", page=page)
        await show_analysis_list(callback, history_callback, user, orm, i18n)
        
    except Exception as e:
        logger.error(f"Error handling pagination: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü", locale=user.lang)
        )


@router.callback_query(AnalysisDetailCallback.filter(F.action == "download"))
async def download_analysis_file(
    callback: CallbackQuery,
    callback_data: AnalysisDetailCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        if not orm or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang), 
                show_alert=True
            )
            return
            
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            analysis = await history_repo.get_analysis_by_id(
                callback_data.analysis_id, user.user_id
            )
        
        if not analysis:
            await callback.answer(
                i18n.gettext("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", locale=user.lang)
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ file_id
        if analysis.file_path and analysis.file_path.strip():
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ file_id (file_path —Å–æ–¥–µ—Ä–∂–∏—Ç file_id)
                if analysis.file_type == "photo":
                    # –î–ª—è —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º send_photo
                    if callback.message and hasattr(callback.message, 'answer_photo'):
                        await callback.message.answer_photo(  # type: ignore
                            photo=analysis.file_path,  # file_id
                            caption=i18n.gettext("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞", locale=user.lang)
                        )
                else:
                    # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º send_document
                    if callback.message and hasattr(callback.message, 'answer_document'):
                        await callback.message.answer_document(  # type: ignore
                            document=analysis.file_path,  # file_id
                            caption=i18n.gettext("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞", locale=user.lang)
                        )
                
                await callback.answer(
                    i18n.gettext("üíæ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", locale=user.lang)
                )
                
            except Exception as e:
                logger.error(f"Error sending file by file_id: {e}")
                await callback.answer(
                    i18n.gettext("üíæ –§–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞)", locale=user.lang),
                    show_alert=True
                )
        else:
            await callback.answer(
                i18n.gettext("üíæ –§–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞)", locale=user.lang),
                show_alert=True
            )
            
    except Exception as e:
        logger.error(f"Error downloading file: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", locale=user.lang)
        )


@router.callback_query(AnalysisDetailCallback.filter(F.action == "share"))
async def share_analysis(
    callback: CallbackQuery,
    callback_data: AnalysisDetailCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∞–Ω–∞–ª–∏–∑–æ–º."""
    try:
        if not orm or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang), 
                show_alert=True
            )
            return
            
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            analysis = await history_repo.get_analysis_by_id(
                callback_data.analysis_id, user.user_id
            )
        
        if not analysis:
            await callback.answer(
                i18n.gettext("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", locale=user.lang)
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
        device_info = f"{analysis.device_model}, {analysis.ios_version}" if analysis.device_model else i18n.gettext("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", locale=user.lang)
        date_str = analysis.created_at.strftime("%d.%m.%Y")
        status = i18n.gettext("‚úÖ Solution found", locale=user.lang) if analysis.is_solution_found else i18n.gettext("‚ùå Solution not found", locale=user.lang)
        
        share_text = i18n.gettext(
            "üì± *Device Analysis*\n\n"
            "üîß Device: {device}\n"
            "üìÖ Analysis date: {date}\n"
            "üìÑ File type: {file_type}\n"
            "üîç Result: {status}\n\n",
            locale=user.lang
        ).format(
            device=device_info,
            date=date_str,
            file_type=analysis.file_type,
            status=status
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if analysis.is_solution_found and analysis.solution_text:
            share_text += i18n.gettext("üìã Solution:\n{solution}\n\n", locale=user.lang).format(
                solution=analysis.solution_text
            )
        
        share_text += i18n.gettext("Analysis performed with @PanicDoctorBot", locale=user.lang)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏)
        max_text_len = 1200
        if len(share_text) > max_text_len:
            share_text = share_text[:max_text_len] + "..."
        
        url_encoded_text = urllib.parse.quote(share_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É URL
        if len(url_encoded_text) > 2000:
            max_text_len = int(max_text_len * 0.8)
            share_text = share_text[:max_text_len] + "..."
            url_encoded_text = urllib.parse.quote(share_text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º Telegram)
        builder.button(
            text=i18n.gettext("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ —á–∞—Ç–µ", locale=user.lang),
            switch_inline_query=share_text
        )
        
        builder.button(
            text=i18n.gettext("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", locale=user.lang),
            callback_data=AnalysisDetailCallback(analysis_id=analysis.id, action="view").pack()
        )
        
        keyboard = builder.as_markup()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
        preview_text = i18n.gettext(
            "üì§ *–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∞–Ω–∞–ª–∏–∑–æ–º*\n\n"
            "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n", 
            locale=user.lang
        ) + share_text
        
        try:
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(  # type: ignore
                    preview_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.warning(f"Could not edit message: {e}")
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error sharing analysis: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ", locale=user.lang)
        )


@router.callback_query(AnalysisDetailCallback.filter(F.action == "repeat"))
async def repeat_analysis(
    callback: CallbackQuery,
    callback_data: AnalysisDetailCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    try:
        if not orm or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang), 
                show_alert=True
            )
            return
            
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
            can_repeat, error_message = await history_repo.can_repeat_analysis(
                callback_data.analysis_id, user.user_id
            )
            
            if not can_repeat:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                text = i18n.gettext(
                    "‚è∞ *–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫—Ä—É–≥–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã*\n\n{message}\n\n"
                    "–ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è.",
                    locale=user.lang
                ).format(message=error_message)
                
                await callback.answer(
                    error_message,
                    show_alert=True
                )
                return
            
            analysis = await history_repo.get_analysis_by_id(
                callback_data.analysis_id, user.user_id
            )
        
        if not analysis:
            await callback.answer(
                i18n.gettext("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", locale=user.lang)
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ file_id –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if not analysis.file_path or not analysis.file_path.strip():
            await callback.answer(
                i18n.gettext("üîÑ –§–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ", locale=user.lang),
                show_alert=True
            )
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        if not callback.message or not hasattr(callback.message, 'answer'):
            await callback.answer(
                i18n.gettext("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", locale=user.lang)
            )
            return
            
        wait_message = await callback.message.answer(  # type: ignore
            i18n.gettext("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑...", locale=user.lang)
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
            from aiogram import Bot
            bot = callback.bot
            if not bot or not isinstance(bot, Bot):
                raise Exception("Bot not available")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            if analysis.file_type == "photo":
                # –î–ª—è —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                sent_message = await bot.send_photo(
                    chat_id=callback.message.chat.id,  # type: ignore
                    photo=analysis.file_path,
                    caption="üîÑ Re-analysis"
                )
            else:
                # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                sent_message = await bot.send_document(
                    chat_id=callback.message.chat.id,  # type: ignore
                    document=analysis.file_path,
                    caption="üîÑ Re-analysis"
                )
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞
            from services.telegram.handlers.analyzer.handlers import document_analyze
            from aiogram.fsm.context import FSMContext
            from aiogram.fsm.storage.memory import MemoryStorage
            from config import Environ
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
            from aiogram.fsm.storage.base import StorageKey
            storage = MemoryStorage()
            storage_key = StorageKey(bot_id=bot.id, chat_id=callback.message.chat.id, user_id=user.user_id)  # type: ignore
            state = FSMContext(storage=storage, key=storage_key)
            env = Environ()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–∞
            from services.telegram.misc.utils import delete_message
            if wait_message and bot:
                await delete_message(bot, wait_message)  # type: ignore
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –î–û –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            async with orm.async_sessionmaker() as session:
                history_repo = AnalysisHistoryRepo(session)
                await history_repo.increment_repeat_attempts(
                    callback_data.analysis_id, user.user_id
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                current_analysis = await history_repo.get_analysis_by_id(
                    callback_data.analysis_id, user.user_id
                )
                current_attempts = current_analysis.repeat_attempts if current_analysis else 0
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
            await document_analyze(sent_message, user, orm, i18n, state, env)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä—É–≥–∞—Ö
            async with orm.async_sessionmaker() as session:
                history_repo = AnalysisHistoryRepo(session)
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                updated_analysis = await history_repo.get_analysis_by_id(
                    callback_data.analysis_id, user.user_id
                )
                
                if updated_analysis:
                    if updated_analysis.is_solution_found:
                        # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                        await history_repo.reset_repeat_attempts(
                            callback_data.analysis_id, user.user_id
                        )
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫—Ä—É–≥–æ–≤ –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        attempts_left = 2 - current_attempts
                        if attempts_left > 0:
                            attempt_info = i18n.gettext(
                                "üîÑ –ö—Ä—É–≥ {current} –∏–∑ 2", 
                                locale=user.lang
                            ).format(current=current_attempts)
                            
                            if hasattr(callback.message, 'answer'):
                                await callback.message.answer(  # type: ignore
                                    f"{attempt_info}\n"
                                    f"{i18n.gettext('–û—Å—Ç–∞–ª–æ—Å—å –∫—Ä—É–≥–æ–≤: {attempts_left}', locale=user.lang).format(attempts_left=attempts_left)}"
                                )
                        elif attempts_left == 0:
                            # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç
                            if hasattr(callback.message, 'answer'):
                                await callback.message.answer(  # type: ignore
                                    i18n.gettext(
                                        "‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫—Ä—É–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞. "
                                        "–ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 —á–∞—Å–∞.", 
                                        locale=user.lang
                                    )
                                )
            
            # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
            try:
                await delete_message(bot, sent_message)  # type: ignore
            except:
                pass
            
            await callback.answer(
                i18n.gettext("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", locale=user.lang)
            )
                
        except Exception as e:
            logger.error(f"Error in re-analysis process: {e}")
            try:
                if 'bot' in locals() and 'wait_message' in locals() and bot:
                    await delete_message(bot, wait_message)  # type: ignore
            except:
                pass
            await callback.answer(
                i18n.gettext("üîÑ –§–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ", locale=user.lang),
                show_alert=True
            )
            
    except Exception as e:
        logger.error(f"Error repeating analysis: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", locale=user.lang)
        )




@router.callback_query(AnalysisHistoryCallback.filter(F.action == "filter"))
async def show_filter_menu(
    callback: CallbackQuery,
    callback_data: AnalysisHistoryCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    text = i18n.gettext(
        "üîç *–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        locale=user.lang
    )
    
    keyboard = Keyboards.analysis_filter_menu(i18n, user)
    
    try:
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(  # type: ignore
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.warning(f"Could not edit message: {e}")
    await callback.answer()


@router.callback_query(AnalysisFilterCallback.filter(F.filter_type == "file_type"))
async def show_file_type_filter(
    callback: CallbackQuery,
    callback_data: AnalysisFilterCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤."""
    # –ï—Å–ª–∏ –µ—Å—Ç—å filter_value, —Ç–æ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞, –∞ –Ω–µ –ø–æ–∫–∞–∑ –º–µ–Ω—é
    if callback_data.filter_value:
        await apply_filter(callback, callback_data, user, orm, i18n)
        return
        
    text = i18n.gettext(
        "üìÑ *–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–æ–≤:",
        locale=user.lang
    )
    
    keyboard = Keyboards.analysis_file_type_filter(i18n, user)
    
    try:
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(  # type: ignore
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.warning(f"Could not edit message: {e}")
    await callback.answer()


@router.callback_query(AnalysisFilterCallback.filter())
async def apply_filter(
    callback: CallbackQuery,
    callback_data: AnalysisFilterCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤."""
    try:
        if not orm or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang), 
                show_alert=True
            )
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞
        if callback_data.filter_type == "reset":
            history_callback = AnalysisHistoryCallback(action="list", page=0)
            await show_analysis_list(callback, history_callback, user, orm, i18n)
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ file_type –±–µ–∑ filter_value - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ show_file_type_filter
        if callback_data.filter_type == "file_type" and not callback_data.filter_value:
            await show_file_type_filter(callback, callback_data, user, orm, i18n)
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        page_size = 5
        filter_dict = {
            "type": callback_data.filter_type,
            "value": callback_data.filter_value
        }
        
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if callback_data.filter_type == "file_type" and callback_data.filter_value:
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
                history_data = await history_repo.get_user_history(
                    user_id=user.user_id,
                    page=0,
                    page_size=page_size,
                    file_type_filter=callback_data.filter_value
                )
            elif callback_data.filter_type == "success":
                # –§–∏–ª—å—Ç—Ä –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                is_success = callback_data.filter_value == "true"
                history_data = await history_repo.get_user_history(
                    user_id=user.user_id,
                    page=0,
                    page_size=page_size,
                    success_filter=is_success
                )
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
                history_data = await history_repo.get_user_history(
                    user_id=user.user_id,
                    page=0,
                    page_size=page_size
                )
        
        analyses = history_data["analyses"]
        total_pages = history_data["total_pages"]
        
        if not analyses:
            text = i18n.gettext(
                "üì≠ *–ê–Ω–∞–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n"
                "–ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –∞–Ω–∞–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                locale=user.lang
            )
            keyboard = Keyboards.analysis_filter_menu(i18n, user)
        else:
            text = i18n.gettext(
                "üìä *–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã:*\n\n", 
                locale=user.lang
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ –≤ show_analysis_list)
            for i, analysis in enumerate(analyses, 1):
                device_emoji = "üì±" if analysis.device_model and ("iPhone" in analysis.device_model or "iPad" in analysis.device_model) else "üì±"
                
                file_type_emoji = {
                    "ips": "üìÑ",
                    "txt": "üìù", 
                    "photo": "üñºÔ∏è",
                    "json": "üîß"
                }.get(analysis.file_type, "üìÑ")
                
                status_text = i18n.gettext("‚úÖ Solution found", locale=user.lang) if analysis.is_solution_found else i18n.gettext("‚ùå Solution not found", locale=user.lang)
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown
                device_name = analysis.device_model or i18n.gettext("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", locale=user.lang)
                device_name = device_name.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
                
                ios_version = analysis.ios_version or ""
                ios_version = ios_version.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                file_type_display = {
                    "ips": ".ips",
                    "txt": ".txt", 
                    "photo": "photo",
                    "json": ".json"
                }.get(analysis.file_type, analysis.file_type or "file")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_str = analysis.created_at.strftime("%d.%m.%Y, %H:%M")
                
                text += i18n.gettext(
                    "   {number}. {device_emoji} {device}, {ios}\n"
                    "      {file_emoji} –¢–∏–ø: {file_type}\n"
                    "      üìÖ {date}\n"
                    "      {status}\n\n",
                    locale=user.lang
                ).format(
                    number=i,
                    device_emoji=device_emoji,
                    device=device_name,
                    ios=ios_version,
                    file_emoji=file_type_emoji,
                    file_type=file_type_display,
                    date=date_str,
                    status=status_text
                )
            
            keyboard = Keyboards.analysis_history_list(
                i18n, user, analyses, 0, total_pages, filter_dict
            )
        
        try:
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(  # type: ignore
                    text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.warning(f"Could not edit message: {e}")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error applying filter: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞", locale=user.lang)
        )


@router.callback_query(AnalysisHistoryCallback.filter(F.action == "clear_all"))
async def confirm_clear_all_history(
    callback: CallbackQuery,
    callback_data: AnalysisHistoryCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏."""
    text = i18n.gettext(
        "‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏*\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã.",
        locale=user.lang
    )
    
    keyboard = Keyboards.analysis_clear_all_confirm(i18n, user)
    
    try:
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(  # type: ignore
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.warning(f"Could not edit message: {e}")
    await callback.answer()


@router.callback_query(AnalysisHistoryCallback.filter(F.action == "confirm_clear_all"))
async def clear_all_history(
    callback: CallbackQuery,
    callback_data: AnalysisHistoryCallback,
    user: User,
    orm: ORM,
    i18n: I18n
):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤."""
    try:
        if not orm or not orm.async_sessionmaker:
            await callback.answer(
                i18n.gettext("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", locale=user.lang), 
                show_alert=True
            )
            return
            
        async with orm.async_sessionmaker() as session:
            from database.repo.analysis_history import AnalysisHistoryRepo
            history_repo = AnalysisHistoryRepo(session)
            deleted_count = await history_repo.clear_user_history(user.user_id)
        
        if deleted_count > 0:
            text = i18n.gettext(
                "‚úÖ *–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞*\n\n"
                "–£–¥–∞–ª–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {count}\n\n"
                "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.",
                locale=user.lang
            ).format(count=deleted_count)
        else:
            text = i18n.gettext(
                "üì≠ *–ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞*\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                locale=user.lang
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏
        keyboard = Keyboards.analysis_history_main(i18n, user, 0)  # 0 –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        
        try:
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(  # type: ignore
                    text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.warning(f"Could not edit message: {e}")
        
        await callback.answer(
            i18n.gettext("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞", locale=user.lang)
        )
            
    except Exception as e:
        logger.error(f"Error clearing history: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", locale=user.lang)
        )


@router.callback_query(F.data == "home_menu")
async def return_to_home_menu(callback: CallbackQuery, user: User, orm: ORM, i18n: I18n):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∞–Ω–∞–ª–∏–∑–æ–≤."""
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ (–≤–º–µ—Å—Ç–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –º–µ–Ω—é)
        history_callback = AnalysisHistoryCallback(action="main")
        await return_to_main(callback, history_callback, user, orm, i18n)
        
    except Exception as e:
        logger.error(f"Error returning to analysis history main: {e}")
        await callback.answer(
            i18n.gettext("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", locale=user.lang)
        ) 