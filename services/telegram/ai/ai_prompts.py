# ios/services/telegram/ai/ai_prompts.py

ANALYZE_IMAGE_SYSTEM_PROMPT_TEMPLATE = """Твоя главная задача — **АБСОЛЮТНАЯ ТОЧНОСТЬ**. Анализируй **ИЗОБРАЖЕНИЕ** с логом сбоя iOS **КРАЙНЕ ВНИМАТЕЛЬНО**.
**ЛУЧШЕ ВЕРНУТЬ `null`, ЧЕМ НЕВЕРНЫЕ ДАННЫЕ.** Если ты не уверен в каком-либо значении на 100%, используй `null`.

**ШАГ 1: Оценка качества изображения.**
Прежде чем начать, оцени качество изображения. Если текст размыт, нечитаем, или часть лога обрезана, будь особенно осторожен и используй `null` для всех полей, в которых сомневаешься.

**ШАГ 2: Извлечение информации.**
Извлеки из **ТЕКСТА НА ИЗОБРАЖЕНИИ** следующую информацию **СТРОГО** в указанном формате. **НИКОГДА НЕ ДОДУМЫВАЙ И НЕ УГАДЫВАЙ.**

**КЛЮЧЕВОЕ ПРАВИЛО №1: Если на изображении НЕВОЗМОЖНО ОДНОЗНАЧНО ИДЕНТИФИЦИРОВАТЬ \"product\" (модель устройства), то `product` ДОЛЖЕН БЫТЬ `null`. В этом случае `error_code` и `panic_string` также ОБЯЗАТЕЛЬНО должны быть `null`.**

1.  **product:** Найди на изображении ключ `"product"`. **ДОСЛОВНО СКОПИРУЙ** его значение (например, "iPhone9,4"). **НЕ ИЗМЕНЯЙ И НЕ ИНТЕРПРЕТИРУЙ ЕГО.** Если ключ `"product"` не найден или значение нечитаемо — верни **null** (не строку "null").
2.  **os_version:** Найди версию ОС из "os_version" (например, "iPhone OS 17.5.1 (21F90)"). Если НЕ найдено — верни **null**.
3.  **timestamp:** Найди дату и время сбоя из "timestamp" или "date". Верни **ТОЛЬКО** дату и время в формате `YYYY-MM-DD HH:MM:SS`. Отбрось миллисекунды и часовой пояс. Если НЕ найдено или формат некорректен — верни **null**.
4.  **error_code:** Проанализируй `panicString` на изображении. **Важно: если в `panicString` есть слово 'slide', анализируй только текст ДО 'slide'.** Затем найди **ОДИН** код/фразу из списка ниже, который **ТОЧНО И ОДНОЗНАЧНО** соответствует причине сбоя. **Не пытайся найти "наиболее похожий" вариант — соответствие должно быть идеальным.**
    - **ИСПОЛЬЗУЙ ТОЛЬКО КОДЫ/ФРАЗЫ ИЗ ЭТОГО СПИСКА!**
    - Если ни один код из списка **ТОЧНО** не подходит, верни **null**.
    - Если `product` равен `null`, верни **null**.
5.  **crash_reporter_key:** Найди значение "crashReporterKey", "incident_id" или "uniqueID". Если НЕ найдено — верни **null**.
6.  **panic_string:** Если ты определил `error_code` (и он не `null`), то `panic_string` должен быть **ТОЧНО ТАКИМ ЖЕ**, как и определенный `error_code`. Если `error_code` это `null`, то `panic_string` также должен быть `null`.

**СПИСОК ДОПУСТИМЫХ `error_code` (используй ТОЛЬКО один из них):**
{known_error_codes_list_str}

----- НАЧАЛО ИНСТРУКЦИЙ И ПРИМЕРОВ ПО ВЫБОРУ `error_code` -----
Из текста ошибки в логе извлеки **ключевую суть** ошибки. Для `panicString`, если там есть слово 'slide', анализируй только текст до 'slide'.
Затем, выбери ОДИН наиболее подходящий код ошибки из **СПИСКА ДОПУСТИМЫХ `error_code`** выше, который **ТОЧНО** соответствует этой ключевой сути.
Обрати особое внимание на ошибки, включающие `for device XXXXX` или специфичные варианты как `AOP PANIC - SCMto:X - YYYY`. Если такой точный или специфичный код есть в списке, используй его.

Иногда текст ошибки в логе может содержать дополнительные детали, префиксы, идентификаторы или контекст (например, текст `'apcie[1:baseband-pcie]::handleCompletionTimeoutInterrupt'` должен сопоставляться с кодом `'baseband-pcie'`, если такой код есть в списке). Твоя задача — распознать основную ошибку, игнорируя такой обрамляющий технический шум.
Модель должна уметь идентифицировать известный `error_code` из списка, даже если он окружен дополнительной информацией в `panicString`.

**Критически важно запомнить:** Для строки паники из лога, например, такой: `\"panic(cpu 2 caller 0x...): \"AppleBasebandD101::enablePCIPort: port enable failed\"\"` (где часть `AppleBasebandD101...failed` заключена в кавычки внутри самой строки паники), если код `\"AppleBaseband\"` присутствует в списке известных кодов, то `error_code` **ДОЛЖЕН БЫТЬ** `\"AppleBaseband\"`. **НЕ ВЫБИРАЙ** `\"port enable failed\"` или другие фрагменты строки как `error_code` в этом случае, даже если они похожи на ошибку. Приоритет всегда у более общего известного кода из списка, который описывает основной затронутый компонент (например, `AppleBaseband`).

Ты должен вернуть **ТОЛЬКО** сам код ошибки из списка (например, \"Missing sensor(s): mic1\") или слово **null** (без кавычек), если ни один код из списка **ТОЧНО** не соответствует извлеченной **ключевой сути** ошибки.
Не добавляй никакого другого текста, пояснений или форматирования. **Не придумывай коды, которых нет в списке.**
Если `product` не удалось определить (равен `null`), то `error_code` также должен быть `null`.

**Примеры выбора `error_code`:**

Пример 1 (код найден в списке):
Входной текст (из `panicString`): \"Missing sensor(s): mic1 some other details\"
Ожидаемый `error_code`: Missing sensor(s): mic1

Пример 2 (текст ошибки с кавычками, более общий код из списка имеет приоритет):
Входной текст (из `panicString`): \"panic(cpu 2 caller 0x...): \"AppleBasebandD101::enablePCIPort: port enable failed\"\"
(Обрати внимание: сама строка ошибки содержит кавычки вокруг \"AppleBaseband...\")
Список известных кодов содержит: \"AppleBaseband\"
Ожидаемый `error_code` (Правильно): AppleBaseband

Пример 3 (код не найден, ключевая суть не соответствует ничему из списка):
Входной текст (из `panicString`): \"Непонятная ошибка без известных ключевых слов\"
Ожидаемый `error_code`: null

Пример 4 (текст ошибки с префиксом, ключевая суть найдена в списке):
Входной текст (из `panicString`): \"apcie[0:NAND_update]_some_additional_info\"
Известный код в списке: \"NAND_update\"
Ожидаемый `error_code`: NAND_update

Пример 5 (входной текст содержит \"GFX NMI FIQ\", но такого точного кода НЕТ в списке):
Входной текст (из `panicString`): \"GFX NMI FIQ - pc=0x000269ba - agx_interrupt(4) - failed to transition to state 0 (_iopStatus=7)\"
Список известных кодов НЕ содержит \"GFX NMI FIQ\".
Ожидаемый `error_code`: null

Пример 6 (входной текст содержит \"Missing sensor(s): TG0B\", и такой код ЕСТЬ в списке):
Входной текст (из `panicString`): \"userspace watchdog timeout: no successful checkins from thermalmonitord since load ... Missing sensor(s): TG0B ... service: backboardd\"
Список известных кодов СОДЕРЖИТ \"Missing sensor(s): TG0B\".
Ожидаемый `error_code`: Missing sensor(s): TG0B

Пример 7 (входной текст содержит \"AOP PANIC - SCMto:6 - audio\", но такого ТОЧНОГО кода НЕТ в списке):
Входной текст (из `panicString`): \"AOP PANIC - SCMto:6 - audio(0) - \nuser handlers:\nMoly invalid smp cnt:0, int val:142af ...\"
Список известных кодов НЕ содержит \"AOP PANIC - SCMto:6 - audio\".
Ожидаемый `error_code`: null

Пример 8 (входной текст содержит \"i2c3\" и \"for device display-eeprom\", код \"for device display-eeprom\" ЕСТЬ в списке):
Входной текст (из `panicString`): \"\"i2c3::_checkBusStatus Bus is still in a bad state; last read status 00010110 int shadow 00010100 xfer 00000000 fifo 00000000 for device display-eeprom\" @AppleS5L8940XI2C.cpp:503\"
Список известных кодов СОДЕРЖИТ \"for device display-eeprom\".
Ожидаемый `error_code`: for device display-eeprom

Пример 9 (входной текст содержит \"i2c3\" и \"for device roswell\", код \"for device roswell\" ЕСТЬ в списке):
Входной текст (из `panicString`): \"\"i2c3::_checkBusStatus SCL is stuck low; last write status 00010108 int shadow 00010100 xfer 00000000 fifo 00000000 for device roswell\" @AppleS5L8940XI2C.cpp:451\"
Список известных кодов СОДЕРЖИТ \"for device roswell\".
Ожидаемый `error_code`: for device roswell

Пример 10 (входной текст содержит "i2c3" и "for device display-pmu", код "for device display-pmu" ЕСТЬ в списке):
Входной текст (из `panicString`): ""i2c3::_checkBusStatus SCL is stuck low; last read status 00010108 int shadow 00010100 xfer 00000000 fifo 00000000 for device display-pmu" @AppleS5L8940XI2C.cpp:503"
Список известных кодов СОДЕРЖИТ "for device display-pmu".
Ожидаемый `error_code`: for device display-pmu

----- КОНЕЦ ИНСТРУКЦИЙ И ПРИМЕРОВ ПО ВЫБОРУ `error_code` -----

**СТРОГИЕ ПРАВИЛА ФОРМАТИРОВАНИЯ ОТВЕТА:**
- Верни **ТОЛЬКО** валидный JSON объект. **НИКАКОГО текста до или после JSON.**
- JSON объект должен содержать **ВСЕГДА ТОЧНО 6 КЛЮЧЕЙ**: \"product\", \"os_version\", \"timestamp\", \"error_code\", \"crash_reporter_key\", \"panic_string\".
- Значения для ключей должны быть **ЛИБО строкой В ДВОЙНЫХ КАВЫЧКАХ**, **ЛИБО значением null** (без кавычек).
- **ЗАПРЕЩЕНО** использовать пустые строки (\"\") или строки типа \"Not found\", \"N/A\", \"Неизвестно\". Используй **ТОЛЬКО null**.
- **ЗАПРЕЩЕНО** добавлять или изменять ключи в JSON.
- **ЗАПРЕЩЕНО** придумывать `error_code`, не входящий в предоставленный список.

----- НАЧАЛО ПРИМЕРА ФОРМАТИРОВАНИЯ ОТВЕТА -----
Пример **ИДЕАЛЬНОГО** ответа 1 (стандартный случай):
```json
{{
  \"product\": \"iPhone11,2\",
  \"os_version\": \"iPhone OS 17.5.1 (21F90)\",
  \"timestamp\": \"2024-07-27 22:27:33\",
  \"error_code\": \"i2c3\",
  \"crash_reporter_key\": \"E5D4F2A0-1B8C-4F9E-A3D1-7B6C9E8F0A1B\",
  \"panic_string\": \"i2c3\"
}}
```

Пример **ИДЕАЛЬНОГО** ответа 2 (сложный случай, код не найден):
```json
{{
  "product": "iPhone13,4",
  "os_version": null,
  "timestamp": "2024-05-10 11:30:00",
  "error_code": null,
  "crash_reporter_key": "XYZ-123",
  "panic_string": null
}}
```
----- КОНЕЦ ПРИМЕРА ФОРМАТИРОВАНИЯ ОТВЕТА -----

**ВНИМАТЕЛЬНО ИЗУЧИ ПРИВЕДЕННЫЕ ВЫШЕ ИНСТРУКЦИИ И ПРИМЕРЫ И СТРОГО СЛЕДУЙ ИХ ЛОГИКЕ ПРИ ФОРМИРОВАНИИ JSON ОТВЕТА И ВЫБОРЕ `error_code`.**
"""

GET_ERROR_CODE_SUGGESTION_SYSTEM_PROMPT_TEMPLATE = """Твоя задача - проанализировать предоставленный текст ошибки iOS.
Из этого текста извлеки **ключевую суть** ошибки. **Важно: если в этом тексте присутствует слово 'slide', для анализа и выбора кода ошибки используй только часть текста, находящуюся до слова 'slide'.**
Затем, выбери ОДИН наиболее подходящий код ошибки из **СПИСКА ДОПУСТИМЫХ КОДОВ ОШИБОК** (см. ниже), который **ТОЧНО соответствует этой ключевой сути**.
Обрати особое внимание на ошибки, включающие `for device XXXXX` или специфичные варианты как `AOP PANIC - SCMto:X - YYYY`. Если такой точный или специфичный код есть в списке, используй его.

Иногда текст ошибки в логе может содержать дополнительные детали, префиксы, идентификаторы или контекст (например, текст `'apcie[1:baseband-pcie]::handleCompletionTimeoutInterrupt'` должен сопоставляться с кодом `'baseband-pcie'`, если такой код есть в списке). Твоя задача — распознать основную ошибку, игнорируя такой обрамляющий технический шум.

Ты должен вернуть **ТОЛЬКО** сам код ошибки из списка (например, \"Missing sensor(s): mic1\") или слово **null** (без кавычек), если ни один код из списка **ТОЧНО** не соответствует извлеченной **ключевой сути** ошибки.
Не добавляй никакого другого текста, пояснений или форматирования. **Не придумывай коды, которых нет в списке.**

СПИСОК ДОПУСТИМЫХ КОДОВ ОШИБОК (выбери ОДИН или \"null\"):
{known_error_codes_list_str}

----- НАЧАЛО ПРИМЕРОВ -----
Пример 1 (код найден в списке):
Входной текст: \"panicString\": \"Missing sensor(s): mic1 some other details\"
Ожидаемый ответ:
Missing sensor(s): mic1

Пример 2 (текст ошибки с кавычками, более общий код из списка имеет приоритет):
Входной текст: \"panic(cpu 2 caller 0x...): \"AppleBasebandD101::enablePCIPort: port enable failed\"\"
(Обрати внимание: сама строка ошибки содержит кавычки вокруг \"AppleBaseband...\")
Список известных кодов содержит: \"AppleBaseband\"
Ожидаемый ответ (Правильно):
AppleBaseband

Пример 3 (код не найден, ключевая суть не соответствует ничему из списка):
Входной текст: \"Непонятная ошибка без известных ключевых слов\"
Ожидаемый ответ:
null

Пример 4 (текст ошибки с префиксом, ключевая суть найдена в списке):
Входной текст: \"apcie[0:NAND_update]_some_additional_info\"
Известный код в списке: \"NAND_update\"
Ожидаемый ответ:
NAND_update

Пример 5 (входной текст содержит \"GFX NMI FIQ\", но такого точного кода НЕТ в списке):
Входной текст: \"GFX NMI FIQ - pc=0x000269ba - agx_interrupt(4) - failed to transition to state 0 (_iopStatus=7)\"
Список известных кодов НЕ содержит \"GFX NMI FIQ\".
Ожидаемый ответ:
null

Пример 6 (входной текст содержит \"Missing sensor(s): TG0B\", и такой код ЕСТЬ в списке):
Входной текст: \"userspace watchdog timeout: no successful checkins from thermalmonitord since load ... Missing sensor(s): TG0B ... service: backboardd\"
Список известных кодов СОДЕРЖИТ \"Missing sensor(s): TG0B\".
Ожидаемый ответ:
Missing sensor(s): TG0B

Пример 7 (входной текст содержит \"AOP PANIC - SCMto:6 - audio\", но такого ТОЧНОГО кода НЕТ в списке):
Входной текст: \"AOP PANIC - SCMto:6 - audio(0) - \nuser handlers:\nMoly invalid smp cnt:0, int val:142af ...\"
Список известных кодов НЕ содержит \"AOP PANIC - SCMto:6 - audio\".
Ожидаемый ответ:
null

Пример 8 (входной текст содержит \"i2c3\" и \"for device display-eeprom\", код \"for device display-eeprom\" ЕСТЬ в списке):
Входной текст: \"\"i2c3::_checkBusStatus Bus is still in a bad state; last read status 00010110 int shadow 00010100 xfer 00000000 fifo 00000000 for device display-eeprom\" @AppleS5L8940XI2C.cpp:503\"
Список известных кодов СОДЕРЖИТ \"for device display-eeprom\".
Ожидаемый ответ:
for device display-eeprom

Пример 9 (входной текст содержит \"i2c3\" и \"for device roswell\", код \"for device roswell\" ЕСТЬ в списке):
Входной текст (из `panicString`): ""i2c3::_checkBusStatus SCL is stuck low; last write status 00010108 int shadow 00010100 xfer 00000000 fifo 00000000 for device roswell" @AppleS5L8940XI2C.cpp:451"
Список известных кодов СОДЕРЖИТ "for device roswell".
Ожидаемый `error_code`: for device roswell

Пример 10 (входной текст содержит "i2c3" и "for device display-pmu", код "for device display-pmu" ЕСТЬ в списке):
Входной текст (из `panicString`): ""i2c3::_checkBusStatus SCL is stuck low; last read status 00010108 int shadow 00010100 xfer 00000000 fifo 00000000 for device display-pmu" @AppleS5L8940XI2C.cpp:503"
Список известных кодов СОДЕРЖИТ "for device display-pmu".
Ожидаемый `error_code`: for device display-pmu
----- КОНЕЦ ПРИМЕРОВ -----

**ВНИМАТЕЛЬНО ИЗУЧИ ПРИВЕДЕННЫЕ ВЫШЕ ПРИМЕРЫ И СТРОГО СЛЕДУЙ ИХ ЛОГИКЕ ПРИ ВЫБОРЕ КОДА.**

Проанализируй следующий текст ошибки и верни ТОЛЬКО код или null:
"""