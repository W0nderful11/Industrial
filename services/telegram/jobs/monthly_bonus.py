import logging
from decimal import Decimal
import os
from aiogram import Bot
from aiogram.utils.i18n import I18n
from database.database import ORM
from apscheduler.schedulers.asyncio import AsyncIOScheduler

logger = logging.getLogger(__name__)

# Base price per analysis from environment variable
BASE_PRICE_PER_ANALYSIS = Decimal(os.getenv("PRICE_PER_ANALYSIS", "1.00"))
MONTHLY_BONUS_ANALYSIS_COUNT = 1

# --- Constant for Monthly Token Bonus ---
MONTHLY_BONUS_TOKENS = 1

async def give_monthly_bonus(bot: Bot, orm: ORM, i18n: I18n):
    """Gives a monthly token bonus to all registered users."""
    logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤...")
    # TODO: Define what constitutes an "active" user for the bonus (e.g., role='user')
    users = await orm.user_repo.find_all_active_users() # Assuming this method gets users with role 'user' or similar
    
    if not users:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
        return

    successful_bonuses = 0
    failed_bonuses = 0

    for user in users:
        try:
            # Add bonus tokens using the new method
            added_successfully = await orm.user_repo.add_tokens(user.user_id, MONTHLY_BONUS_TOKENS)
            
            if added_successfully:
                token_balance_after_bonus = await orm.user_repo.get_token_balance(user.user_id)
            
                # Send notification using tokens
                # TODO: i18n: Ensure locale works correctly
                notification_text = i18n.gettext(
                    "üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å: {count} —Ç–æ–∫–µ–Ω. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤.",
                locale=user.lang
                ).format(count=MONTHLY_BONUS_TOKENS, balance=token_balance_after_bonus)
            
                await bot.send_message(user.user_id, notification_text)
                successful_bonuses += 1
                logger.debug(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å ({MONTHLY_BONUS_TOKENS} —Ç–æ–∫–µ–Ω) —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
            else:
                 # Log failure if add_tokens returned False (e.g., user not found)
                 failed_bonuses += 1
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id} (–º–µ—Ç–æ–¥ add_tokens –≤–µ—Ä–Ω—É–ª False).")

        except Exception as e:
            failed_bonuses += 1
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

    logger.info(f"–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {successful_bonuses}, –û—à–∏–±–∫–∏: {failed_bonuses}")

def schedule_monthly_bonus(scheduler: AsyncIOScheduler, bot: Bot, orm: ORM, i18n: I18n):
    """Schedules the monthly bonus job."""
    scheduler.add_job(
        give_monthly_bonus,
        trigger='cron', 
        day=1, 
        hour=9, # Run at 9 AM on the 1st of every month
        minute=0,
        kwargs={'bot': bot, 'orm': orm, 'i18n': i18n},
        id='monthly_bonus_job',
        name='Monthly User Bonus',
        replace_existing=True
    )
    logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.") 